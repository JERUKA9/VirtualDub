#include <vd2/system/Fraction.h>
#include "test.h"

DEFINE_TEST(Fraction) {
	VDASSERT(VDFraction(1,1) * VDFraction(2,3) == VDFraction(2,3));
	VDASSERT(VDFraction(3,1) * VDFraction(2,3) == VDFraction(2,1));
	VDASSERT(VDFraction(0x80000000, 0x80000000) == VDFraction(1,1));
	VDASSERT(VDFraction(0xF0000000, 0x08000000) == VDFraction(30,1));

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r ( 10000000000000i64) ==  333333333333i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t ( 10000000000000i64) ==  333333333333i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u ( 10000000000000i64) ==  333333333334i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir( 10000000000000i64) ==  333333333333i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it( 10000000000000i64) ==  333333333333i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu( 10000000000000i64) ==  333333333334i64);

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r ( 20000000000000i64) ==  666666666667i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t ( 20000000000000i64) ==  666666666666i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u ( 20000000000000i64) ==  666666666667i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir( 20000000000000i64) ==  666666666667i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it( 20000000000000i64) ==  666666666666i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu( 20000000000000i64) ==  666666666667i64);

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r ( 30000000000000i64) == 1000000000000i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t ( 30000000000000i64) == 1000000000000i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u ( 30000000000000i64) == 1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir( 30000000000000i64) == 1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it( 30000000000000i64) == 1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu( 30000000000000i64) == 1000000000000i64);

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r (-10000000000000i64) == -333333333333i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t (-10000000000000i64) == -333333333333i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u (-10000000000000i64) == -333333333333i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir(-10000000000000i64) == -333333333333i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it(-10000000000000i64) == -333333333333i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu(-10000000000000i64) == -333333333333i64);

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r (-20000000000000i64) == -666666666667i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t (-20000000000000i64) == -666666666666i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u (-20000000000000i64) == -666666666666i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir(-20000000000000i64) == -666666666667i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it(-20000000000000i64) == -666666666666i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu(-20000000000000i64) == -666666666666i64);

	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64r (-30000000000000i64) ==-1000000000000i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64t (-30000000000000i64) ==-1000000000000i64);
	VDASSERT(VDFraction(0x08000000, 0xF0000000).scale64u (-30000000000000i64) ==-1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64ir(-30000000000000i64) ==-1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64it(-30000000000000i64) ==-1000000000000i64);
	VDASSERT(VDFraction(0xF0000000, 0x08000000).scale64iu(-30000000000000i64) ==-1000000000000i64);

	VDASSERT(VDFraction(1, 1).scale64r (1) == 1);
	VDASSERT(VDFraction(1, 1).scale64t (1) == 1);
	VDASSERT(VDFraction(1, 1).scale64u (1) == 1);
	VDASSERT(VDFraction(1, 1).scale64ir(1) == 1);
	VDASSERT(VDFraction(1, 1).scale64it(1) == 1);
	VDASSERT(VDFraction(1, 1).scale64iu(1) == 1);
	VDASSERT(VDFraction(1, 1).scale64r (-1) == -1);
	VDASSERT(VDFraction(1, 1).scale64t (-1) == -1);
	VDASSERT(VDFraction(1, 1).scale64u (-1) == -1);
	VDASSERT(VDFraction(1, 1).scale64ir(-1) == -1);
	VDASSERT(VDFraction(1, 1).scale64it(-1) == -1);
	VDASSERT(VDFraction(1, 1).scale64iu(-1) == -1);

	// check for broken carry
	VDASSERT(VDFraction(0xFFFFFFFF, 0xFFFFFFFF).scale64r(0x7FFFFFFFFFFFFFFFi64) == 0x7FFFFFFFFFFFFFFFi64);
	return 0;
}

