{\rtf1\ansi\ansicpg1252\uc1 \deff1\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f14\fnil\fcharset2\fprq2{\*\panose 05000000000000000000}Wingdings;}
{\f28\fmodern\fcharset0\fprq1{\*\panose 020b0609040504020204}Lucida Console;}{\f35\froman\fcharset238\fprq2 Times New Roman CE;}{\f36\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f38\froman\fcharset161\fprq2 Times New Roman Greek;}
{\f39\froman\fcharset162\fprq2 Times New Roman Tur;}{\f40\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f41\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f42\froman\fcharset186\fprq2 Times New Roman Baltic;}
{\f43\fswiss\fcharset238\fprq2 Arial CE;}{\f44\fswiss\fcharset204\fprq2 Arial Cyr;}{\f46\fswiss\fcharset161\fprq2 Arial Greek;}{\f47\fswiss\fcharset162\fprq2 Arial Tur;}{\f48\fswiss\fcharset177\fprq2 Arial (Hebrew);}
{\f49\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f50\fswiss\fcharset186\fprq2 Arial Baltic;}{\f51\fmodern\fcharset238\fprq1 Courier New CE;}{\f52\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f54\fmodern\fcharset161\fprq1 Courier New Greek;}
{\f55\fmodern\fcharset162\fprq1 Courier New Tur;}{\f56\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f57\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f58\fmodern\fcharset186\fprq1 Courier New Baltic;}
{\f259\fmodern\fcharset238\fprq1 Lucida Console CE;}{\f260\fmodern\fcharset204\fprq1 Lucida Console Cyr;}{\f262\fmodern\fcharset161\fprq1 Lucida Console Greek;}{\f263\fmodern\fcharset162\fprq1 Lucida Console Tur;}}{\colortbl;\red0\green0\blue0;
\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;
\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext15 footnote text;}{\*\cs16 \additive \super \sbasedon10 footnote reference;}{
\s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 Heading;}{\s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 
\f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon19 \snext0 Header (topic);}{\s19\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext19 header;}
{\s20\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext21 Glossary topic;}{\s21\ql \li0\ri0\sa240\widctlpar\tx360\faauto\rin0\lin0\itap0 
\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext20 Glossary topic text;}{\s22\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext22 
footer;}}{\*\listtable{\list\listtemplateid-670399306\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 }
{\listname ;}\listid-2}{\list\listtemplateid4721882\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid114061879}{\list\listtemplateid1147561722\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid263465783}{\list\listtemplateid-1045669054\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers
;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid526061887}{\list\listtemplateid-2059761854\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid1355315356\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid774400799}{\list\listtemplateid291260800\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1032728358}{\list\listtemplateid-412692290\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers
;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1130781284}{\list\listtemplateid-1379530988\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1142498808}{\list\listtemplateid-2059761854\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li720\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers
;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1251432378}{\list\listtemplateid-1616590250\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1308779461}{\list\listtemplateid-867808816\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1472212169}{\list\listtemplateid55605654\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid1665469016}{\list\listtemplateid1115879670\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid2005815638}{\list\listtemplateid1144562390\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid2024740725}{\list\listtemplateid-2059761854\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid-931346168\'01\u-3913 ?;}{\levelnumbers;}\f3
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \li360\jclisttab\tx720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2
\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693
\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2160\jclisttab\tx2160 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext
\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li2880\jclisttab\tx2880 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360
\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li3600\jclisttab\tx3600 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li4320\jclisttab\tx4320 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698689\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5040\jclisttab\tx5040 }{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698691\'01o;}{\levelnumbers;}\f2\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li5760\jclisttab\tx5760 }{\listlevel\levelnfc23
\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\leveltext\leveltemplateid67698693\'01\u-3929 ?;}{\levelnumbers;}\f14\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li6480\jclisttab\tx6480 }
{\listname ;}\listid2060394525}}{\*\listoverridetable{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent360{\leveltext
\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li360 }}\ls1}{\listoverride\listid526061887\listoverridecount0\ls2}{\listoverride\listid1032728358\listoverridecount0\ls3}{\listoverride\listid1130781284
\listoverridecount0\ls4}{\listoverride\listid1251432378\listoverridecount0\ls5}{\listoverride\listid774400799\listoverridecount0\ls6}{\listoverride\listid2060394525\listoverridecount0\ls7}{\listoverride\listid1142498808\listoverridecount0\ls8}
{\listoverride\listid2005815638\listoverridecount0\ls9}{\listoverride\listid1308779461\listoverridecount0\ls10}{\listoverride\listid1665469016\listoverridecount0\ls11}{\listoverride\listid2024740725\listoverridecount0\ls12}{\listoverride\listid1472212169
\listoverridecount0\ls13}{\listoverride\listid263465783\listoverridecount0\ls14}{\listoverride\listid114061879\listoverridecount0\ls15}}{\*\revtbl {Unknown;}}{\info{\title # Hello}{\author Avery Lee}{\operator me}{\creatim\yr2000\mo8\dy8\hr20\min46}
{\revtim\yr2001\mo3\dy20\hr11\min19}{\version12}{\edmins46}{\nofpages216}{\nofwords22191}{\nofchars126492}{\*\company  }{\nofcharsws155341}{\vern8247}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\nolnhtadjtbl \fet0\sectd 
\linex0\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}
{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 
\f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ introduction}}}{ Hello.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par This is the main documentation and help file for VirtualDub, the AVI capture and processing utility, version 1.4d.  Documentation is still very spotty at this point, particularly for the main part of the program (capture mode is better documented
).  Most of the information is context help, which can be accessed by clicking the question mark buttons and selecting controls.
\par 
\par VirtualDub, its setup program, its AVIFile handler and associated DLLs, and this help file are protected under the }{\uldb GNU General Public License, Version 2}{\v\uldb license}{.  The most important provision of this clause is that VirtualDub is }{\i 
freely distributable software}{; you may use and copy it verbatim for personal use without charge.  It is not public domain, however; it is copyright \'a9 1998-2000 by Avery Lee, All Rights Reserved.  No warranty is provided.
\par 
\par The MPEG video decoder code is based off the Java MPEG player by Joerg Anders.  The source code is available at }{\f2 http://rnvs.informatik.tu-chemnitz.de/~ja/MPEG/MPEG_Play.html}{.
\par 
\par 1.0 now uses a new MPEG audio decoder core, NekoAmp.  NekoAmp is \'a91999 Avery Lee as well (grin), and is also GPL.  It contains some heavily modified code from FreeAmp and the MPEG reference decoder.
\par 
\par Complete source code to VirtualDub is available, free of charge, under the same license.  At the time of this writing, the URL for this is:
\par 
\par }\pard \ql \li720\ri0\widctlpar\tx720\faauto\rin0\lin720\itap0 {\f2 http://www.virtualdub.org/}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Please check this website for news and updates.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ license}}}{ GNU General Public License (GPL)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\f2 \tab \tab     GNU GENERAL PUBLIC LICENSE
\par \tab \tab        Version 2, June 1991
\par 
\par  Copyright (C) 1989, 1991 Free Software Foundation, Inc.
\par                           675 Mass Ave, Cambridge, MA 02139, USA
\par  Everyone is permitted to copy and distribute verbatim copies
\par  of this license document, but changing it is not allowed.
\par 
\par \tab \tab \tab     Preamble
\par 
\par   The licenses for most software are designed to take away your
\par freedom to share and change it.  By contrast, the GNU General Public
\par License is intended to guarantee your freedom to share and change free
\par software--to make sure the software is free for all its users.  This
\par General Public License applies to most of the Free Software
\par Foundation's software and to any other program whose authors commit to
\par using it.  (Some other Free Software Foundation software is covered by
\par the GNU Library General Public License instead.)  You can apply it to
\par your programs, too.
\par 
\par   When we speak of free software, we are referring to freedom, not
\par price.  Our General Public Licenses are designed to make sure that you
\par have the freedom to distribute copies of free software (and charge for
\par this service if you wish), that you receive source code or can get it
\par if you want it, that you can change the software or use pieces of it
\par in new free programs; and that you know you can do these things.
\par 
\par   To protect your rights, we need to make restrictions that forbid
\par anyone to deny you these rights or to ask you to surrender the rights.
\par These restrictions translate to certain responsibilities for you if you
\par distribute copies of the software, or if you modify it.
\par 
\par   For example, if you distribute copies of such a program, whether
\par gratis or for a fee, you must give the recipients all the rights that
\par you have.  You must make sure that they, too, receive or can get the
\par source code.  And you must show them these terms so they know their
\par rights.
\par 
\par   We protect your rights with two steps: (1) copyright the software, and
\par (2) offer you this license which gives you legal permission to copy,
\par distribute and/or modify the software.
\par 
\par   Also, for each author's protection and ours, we want to make certain
\par that everyone understands that there is no warranty for this free
\par software.  If the software is modified by someone else and passed on, we
\par want its recipients to know that what they have is not the original, so
\par that any problems introduced by others will not reflect on the original
\par authors' reputations.
\par 
\par   Finally, any free program is threatened constantly by software
\par patents.  We wish to avoid the danger that redistributors of a free
\par program will individually obtain patent licenses, in effect making the
\par program proprietary.  To prevent this, we have made it clear that any
\par patent must be licensed for everyone's free use or not licensed at all.
\par 
\par   The precise terms and conditions for copying, distribution and
\par modification follow.
\par 
\par \tab \tab     GNU GENERAL PUBLIC LICENSE
\par    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\par 
\par   0. This License applies to any program or other work which contains
\par a notice placed by the copyright holder saying it may be distributed
\par under the terms of this General Public License.  The "Program", below,
\par refers to any such program or work, and a "work based on the Program"
\par means either the Program or any derivative work under copyright law:
\par that is to say, a work containing the Program or a portion of it,
\par either verbatim or with modifications and/or translated into another
\par language.  (Hereinafter, translation is included without limitation in
\par the term "modification".)  Each licensee is addressed as "you".
\par 
\par Activities other than copying, distribution and modification are not
\par covered by this License; they are outside its scope.  The act of
\par running the Program is not restricted, and the output from the Program
\par is covered only if its contents constitute a work based on the
\par Program (independent of having been made by running the Program).
\par Whether that is true depends on what the Program does.
\par 
\par   1. You may copy and distribute verbatim copies of the Program's
\par source code as you receive it, in any medium, provided that you
\par conspicuously and appropriately publish on each copy an appropriate
\par copyright notice and disclaimer of warranty; keep intact all the
\par notices that refer to this License and to the absence of any warranty;
\par and give any other recipients of the Program a copy of this License
\par along with the Program.
\par 
\par You may charge a fee for the physical act of transferring a copy, and
\par you may at your option offer warranty protection in exchange for a fee.
\par 
\par   2. You may modify your copy or copies of the Program or any portion
\par of it, thus forming a work based on the Program, and copy and
\par distribute such modifications or work under the terms of Section 1
\par above, provided that you also meet all of these conditions:
\par 
\par     a) You must cause the modified files to carry prominent notices
\par     stating that you changed the files and the date of any change.
\par 
\par     b) You must cause any work that you distribute or publish, that in
\par     whole or in part contains or is derived from the Program or any
\par     part thereof, to be licensed as a whole at no charge to all third
\par     parties under the terms of this License.
\par 
\par     c) If the modified program normally reads commands interactively
\par     when run, you must cause it, when started running for such
\par     interactive use in the most ordinary way, to print or display an
\par     announcement including an appropriate copyright notice and a
\par     notice that there is no warranty (or else, saying that you provide
\par     a warranty) and that users may redistribute the program under
\par     these conditions, and telling the user how to view a copy of this
\par     License.  (Exception: if the Program itself is interactive but
\par     does not normally print such an announcement, your work based on
\par     the Program is not required to print an announcement.)
\par 
\par These requirements apply to the modified work as a whole.  If
\par identifiable sections of that work are not derived from the Program,
\par and can be reasonably considered independent and separate works in
\par themselves, then this License, and its terms, do not apply to those
\par sections when you distribute them as separate works.  But when you
\par distribute the same sections as part of a whole which is a work based
\par on the Program, the distribution of the whole must be on the terms of
\par this License, whose permissions for other licensees extend to the
\par entire whole, and thus to each and every part regardless of who wrote it.
\par 
\par Thus, it is not the intent of this section to claim rights or contest
\par your rights to work written entirely by you; rather, the intent is to
\par exercise the right to control the distribution of derivative or
\par collective works based on the Program.
\par 
\par In addition, mere aggregation of another work not based on the Program
\par with the Program (or with a work based on the Program) on a volume of
\par a storage or distribution medium does not bring the other work under
\par the scope of this License.
\par 
\par   3. You may copy and distribute the Program (or a work based on it,
\par under Section 2) in object code or executable form under the terms of
\par Sections 1 and 2 above provided that you also do one of the following:
\par 
\par     a) Accompany it with the complete corresponding machine-readable
\par     source code, which must be distributed under the terms of Sections
\par     1 and 2 above on a medium customarily used for software interchange; or,
\par 
\par     b) Accompany it with a written offer, valid for at least three
\par     years, to give any third party, for a charge no more than your
\par     cost of physically performing source distribution, a complete
\par     machine-readable copy of the corresponding source code, to be
\par     distributed under the terms of Sections 1 and 2 above on a medium
\par     customarily used for software interchange; or,
\par 
\par     c) Accompany it with the information you received as to the offer
\par     to distribute corresponding source code.  (This alternative is
\par     allowed only for noncommercial distribution and only if you
\par     received the program in object code or executable form with such
\par     an offer, in accord with Subsection b above.)
\par 
\par The source code for a work means the preferred form of the work for
\par making modifications to it.  For an executable work, complete source
\par code means all the source code for all modules it contains, plus any
\par associated interface definition files, plus the scripts used to
\par control compilation and installation of the executable.  However, as a
\par special exception, the source code distributed need not include
\par anything that is normally distributed (in either source or binary
\par form) with the major components (compiler, kernel, and so on) of the
\par operating system on which the executable runs, unless that component
\par itself accompanies the executable.
\par 
\par If distribution of executable or object code is made by offering
\par access to copy from a designated place, then offering equivalent
\par access to copy the source code from the same place counts as
\par distribution of the source code, even though third parties are not
\par compelled to copy the source along with the object code.
\par 
\par   4. You may not copy, modify, sublicense, or distribute the Program
\par except as expressly provided under this License.  Any attempt
\par otherwise to copy, modify, sublicense or distribute the Program is
\par void, and will automatically terminate your rights under this License.
\par However, parties who have received copies, or rights, from you under
\par this License will not have their licenses terminated so long as such
\par parties remain in full compliance.
\par 
\par   5. You are not required to accept this License, since you have not
\par signed it.  However, nothing else grants you permission to modify or
\par distribute the Program or its derivative works.  These actions are
\par prohibited by law if you do not accept this License.  Therefore, by
\par modifying or distributing the Program (or any work based on the
\par Program), you indicate your acceptance of this License to do so, and
\par all its terms and conditions for copying, distributing or modifying
\par the Program or works based on it.
\par 
\par   6. Each time you redistribute the Program (or any work based on the
\par Program), the recipient automatically receives a license from the
\par original licensor to copy, distribute or modify the Program subject to
\par these terms and conditions.  You may not impose any further
\par restrictions on the recipients' exercise of the rights granted herein.
\par You are not responsible for enforcing compliance by third parties to
\par this License.
\par 
\par   7. If, as a consequence of a court judgment or allegation of patent
\par infringement or for any other reason (not limited to patent issues),
\par conditions are imposed on you (whether by court order, agreement or
\par otherwise) that contradict the conditions of this License, they do not
\par excuse you from the conditions of this License.  If you cannot
\par distribute so as to satisfy simultaneously your obligations under this
\par License and any other pertinent obligations, then as a consequence you
\par may not distribute the Program at all.  For example, if a patent
\par license would not permit royalty-free redistribution of the Program by
\par all those who receive copies directly or indirectly through you, then
\par the only way you could satisfy both it and this License would be to
\par refrain entirely from distribution of the Program.
\par 
\par If any portion of this section is held invalid or unenforceable under
\par any particular circumstance, the balance of the section is intended to
\par apply and the section as a whole is intended to apply in other
\par circumstances.
\par 
\par It is not the purpose of this section to induce you to infringe any
\par patents or other property right claims or to contest validity of any
\par such claims; this section has the sole purpose of protecting the
\par integrity of the free software distribution system, which is
\par implemented by public license practices.  Many people have made
\par generous contributions to the wide range of software distributed
\par through that system in reliance on consistent application of that
\par system; it is up to the author/donor to decide if he or she is willing
\par to distribute software through any other system and a licensee cannot
\par impose that choice.
\par 
\par This section is intended to make thoroughly clear what is believed to
\par be a consequence of the rest of this License.
\par 
\par   8. If the distribution and/or use of the Program is restricted in
\par certain countries either by patents or by copyrighted interfaces, the
\par original copyright holder who places the Program under this License
\par may add an explicit geographical distribution limitation excluding
\par those countries, so that distribution is permitted only in or among
\par countries not thus excluded.  In such case, this License incorporates
\par the limitation as if written in the body of this License.
\par 
\par   9. The Free Software Foundation may publish revised and/or new versions
\par of the General Public License from time to time.  Such new versions will
\par be similar in spirit to the present version, but may differ in detail to
\par address new problems or concerns.
\par 
\par Each version is given a distinguishing version number.  If the Program
\par specifies a version number of this License which applies to it and "any
\par later version", you have the option of following the terms and conditions
\par either of that version or of any later version published by the Free
\par Software Foundation.  If the Program does not specify a version number of
\par this License, you may choose any version ever published by the Free Software
\par Foundation.
\par 
\par   10. If you wish to incorporate parts of the Program into other free
\par programs whose distribution conditions are different, write to the author
\par to ask for permission.  For software which is copyrighted by the Free
\par Software Foundation, write to the Free Software Foundation; we sometimes
\par make exceptions for this.  Our decision will be guided by the two goals
\par of preserving the free status of all derivatives of our free software and
\par of promoting the sharing and reuse of software generally.
\par 
\par \tab \tab \tab     NO WARRANTY
\par 
\par   11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\par FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
\par OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\par PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\par OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\par MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
\par TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
\par PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\par REPAIR OR CORRECTION.
\par 
\par   12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\par WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\par REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\par INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\par OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\par TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\par YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\par PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\par POSSIBILITY OF SUCH DAMAGES.
\par 
\par \tab \tab      END OF TERMS AND CONDITIONS
\par 
\par \tab Appendix: How to Apply These Terms to Your New Programs
\par 
\par   If you develop a new program, and you want it to be of the greatest
\par possible use to the public, the best way to achieve this is to make it
\par free software which everyone can redistribute and change under these terms.
\par 
\par   To do so, attach the following notices to the program.  It is safest
\par to attach them to the start of each source file to most effectively
\par convey the exclusion of warranty; and each file should have at least
\par the "copyright" line and a pointer to where the full notice is found.
\par 
\par     <one line to give the program's name and a brief idea of what it does.>
\par     Copyright (C) 19yy  <name of author>
\par 
\par     This program is free software; you can redistribute it and/or modify
\par     it under the terms of the GNU General Public License as published by
\par     the Free Software Foundation; either version 2 of the License, or
\par     (at your option) any later version.
\par 
\par     This program is distributed in the hope that it will be useful,
\par     but WITHOUT ANY WARRANTY; without even the implied warranty of
\par     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\par     GNU General Public License for more details.
\par 
\par     You should have received a copy of the GNU General Public License
\par     along with this program; if not, write to the Free Software
\par     Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
\par 
\par Also add information on how to contact you by electronic and paper mail.
\par 
\par If the program is interactive, make it output a short notice like this
\par when it starts in an interactive mode:
\par 
\par     Gnomovision version 69, Copyright (C) 19yy name of author
\par     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
\par     This is free software, and you are welcome to redistribute it
\par     under certain conditions; type `show c' for details.
\par 
\par The hypothetical commands `show w' and `show c' should show the appropriate
\par parts of the General Public License.  Of course, the commands you use may
\par be called something other than `show w' and `show c'; they could even be
\par mouse-clicks or menu items--whatever suits your program.
\par 
\par You should also get your employer (if you work as a programmer) or your
\par school, if any, to sign a "copyright disclaimer" for the program, if
\par necessary.  Here is a sample; alter the names:
\par 
\par   Yoyodyne, Inc., hereby disclaims all copyright interest in the program
\par   `Gnomovision' (which makes passes at compilers) written by James Hacker.
\par 
\par   <signature of Ty Coon>, 1 April 1989
\par   Ty Coon, President of Vice
\par 
\par This General Public License does not permit incorporating your program into
\par proprietary programs.  If your program is a subroutine library, you may
\par consider it more useful to permit linking proprietary applications with the
\par library.  If this is what you want to do, use the GNU Library General
\par Public License instead of this License.
\par }{
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain 
\s18\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_main}}}{Position Control
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par The position control appears in VirtualDub\rquote s main window and in some video dialogs to help you browse through frames and choose the ones you want to work with.  A
ll controls are available in the main window, but in dialogs the playback, scene shuttle, and marking controls are often absent.
\par 
\par \{bmc pos-control.shg\}
\par 
\par Click on a control or button on the position control for help on that item.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_stop}}}{ Stop
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Halts a currently running preview or dub.  This button only appears in the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_playin}}}{ Play input
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Starts playing the input video at the current position.  Most of VirtualDub\rquote 
s processing features are disabled, including range selection. This button only appears in the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_playout}}}{ Play output
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Starts playing processed video from the current position.  All of VirtualDub\rquote 
s processing features are functional.  Preview begins at the current position, will end at the end marker if you have placed it. This button only appears in the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_start}}}{ Start
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Moves the current position to the start.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_back}}}{ Back
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Backs up by a single frame.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_forward}}}{ Forward
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Advances by a single frame.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_end}}}{ End
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Moves the current position to the end.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_keyrev}}}{ Key reverse
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Backs off to the previous keyframe.  With MPEG files, this jumps to the previous I-frame
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_keyfwd}}}{ Key forward
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Advances to the next keyframe.  With MPEG files, this jumps to the next I-frame.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_scenerev}}}{ Scene reverse
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shuttles backward to the previous scene transition.  VirtualDub will t
hen guess where the next transition is and stop, according to the thresholds set in }{\i Preferences\'85}{.  You can click this button again to stop the shuttling or click }{\i scene forward}{
 to switch direction.  This button only appears on the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_scenefwd}}}{ Scene forward
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shuttles forward to the next scene transition, determined by thresholds set in }{\i Preferences\'85}{
.  Click the button again to halt, or click }{\i scene reverse}{ to switch shuttle directions. This button only appears on the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_markin}}}{ Mark in
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Sets the beginning of a range of frames to delete.  Appears only in the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_markout}}}{ Mark out
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Sets the end of a range of frames to delete.  Appears only in the main VirtualDub screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_slider}}}{ Position slider
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Controls which frame you\rquote re on; dr
ag to move around in the source file.  Tick marks will appear every frame, or a black stripe if you have a lot of frames.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ posctl_panel}}}{ Information panel
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Tells the current frame number and time index from the start, in milliseconds.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main}}}{ Monitoring dub status
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par When a processing operation starts, VirtualDub will pop up a status window showing the progress of the dub.
\par 
\par \{bmc status-main.shg\}
\par 
\par Click on a region for an explanation (Ctrl-Tab to show clickable areas).  Click on a tab to switch to another status page in the window.  When VirtualDub is minimized, the percent complete will show up in the taskbar.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main_sourcepos}}}{ Current video frame and audio sample
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Displays VirtualDub\rquote s progress on the input streams.  This allows you to check, for example, if range clipping and edits are act
ive.  A one second clip shouldn\rquote t need 1000 input frames and 4 million audio samples.  However, frame rate decimation doesn\rquote 
t affect the total count; if FRD is set to 3, then the video frame total will stay the same, but the current frame will count up by threes.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main_datasize}}}{ Video and audio sizes
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
How large the video and audio streams in the output file are, at this point.  This allows you to check which stream currently occupies more space.  Normally, the audio stream will be much smaller than the video.  VirtualDub
 also displays the average bandwidth of the video stream in kilobytes per second (K/s), so you can check if the video compressor is meeting its data rate quota or not.  Generally, most will come fairly close by the end of the file.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main_projectedsize}}}{ Projected file size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {T
he estimated final size of the output file, based on how big the video and audio streams are at this point.  The audio portion of this statistic is usually very stable, but the video frames can vary in size, and this value may swing up or down depending o
n how well the remainder of the input compresses.  Thus, this value will sometimes be accurate to the kilobyte, and other times it can be off by a few megabytes at first.
\par 
\par If this value shows a few gigabytes after several minutes when you expected a 100Mb file, though, then you should probably check your settings.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main_renderrate}}}{ Video rendering rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shows how many source frames VirtualDub is processing per second.  It\rquote 
s normal for this value to vary slightly, more so in Windows 95/98 than in NT.  Obviously, when dubbing, you want this value to be as high as possible.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_main_time}}}{ Time elapsed / Estimated Time Remaining
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Displays how long the dub has gone and the estimated total time in }{\i days}{ : }{\i hours}{ : }{\i mins}{ : }{\i secs}{
.  The estimated time is continually updated; it will vary a lot at first but after a few minutes it settles to a stable time.  If the computer speeds up or slows down though, usually due to other programs, the estimated time will change accordingly.

\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_progress}}}{ Progress bar
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shows how far along VirtualDub is in the current operation.  You know, the bar grows right as more is done, and when it\rquote 
s full, everything\rquote s done\'85.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_priority}}}{ Processing thread priority
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Controls how much CPU time VirtualDub receives relative to other tasks in the system.  Normally, VirtualDub gets CPU time roughly equally 
with other tasks.  If its priority is raised, it will tend to get more CPU time, and if its priority is dropped, it will tend to get less.  This is particularly useful if you want to compress in the background but don\rquote 
t want the system bogged down too much.  Note that if needed, VirtualDub will suck up any leftover CPU time that other tasks don\rquote t use, regardless of this setting, so if your system isn\rquote t running any other tasks, it\rquote 
s generally not useful to boost this value.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_showvideo}}}{ Show input/output video
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Enables
 or disables the display of input and output video panes.  During preview, turning off the input pane can speed up the preview if the CPU isn\rquote 
t powerful enough to draw both panes.  In processing mode, VirtualDub only draws both panes every half-second, so turning them off gains very little speed.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_abort}}}{ Abort operation
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Stops the preview or dub operation.  In the case of a dub, the output file will be finalized and properly closed, if possible, to create a fully usable file.  All processed data up to the abort p
oint will be valid.  Use this option with care, since an aborted operation cannot be resumed.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_video}}}{ Monitoring dub status
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par When a processing operation starts, VirtualDub will pop up a status window showing the progress of the dub.
\par 
\par \{bmc status-video.shg\}
\par 
\par Click on a region for an explanation (Ctrl-Tab to show clickable areas).  Click on a tab to switch to another status page in the window.  When VirtualDub is minimized, the percent complete will show up in the taskbar.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_video_fsmonitor}}}{ Video frame size monitor
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This window i
s a moving bar graph showing the output frame sizes as video frames are compressed.  Red bars are key frames, and blue bars are compressed delta frames.  The taller the bar, the larger the frame.  The graph automatically switches scales to accommodate the
 frame sizes.
\par 
\par In preview mode, or when uncompressed video is being output, this graph will be a solid block of red.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ dubstat_perf}}}{ Monitoring dub status
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par When a processing operation starts, VirtualDub will pop up a status window showing the progress of the dub.
\par 
\par \{bmc status-perf.shg\}
\par 
\par Click on a region for an explanation (Ctrl-Tab to show clickable areas).  Click on a tab to switch to another status page in the window.  When VirtualDub is minimized, the percent complete will show up in the taskbar.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 
\b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 IDH_CAPTURE_PREFS_DEFAULTDRIVER}}}{ Default Capture Driver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
You can tell VirtualDub to either use the First Available driver for capture, or to request a specific driver on startup.  If you choose the latter, the driver\rquote s name is stored in the Registry, and VirtualDub will select that driver even if you cha
nge capture driver numbers by adding or removing capture cards.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_PREFS_PERDRIVER}}}{ Per-driver settings
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Settings which can be adjusted for each capture driver.  These settings go into effect when the capture driver is selected.  They are saved by capture driver name, and w
ill be matched properly even if driver IDs change.  Note that if two capture cards have the exact same name, the higher ID card will override the settings of the lower ID card, and the two cards will use the same settings.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_PREFS_INITIALDISPLAY}}}{ Initial Display Mode
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Selects w
hich display mode (preview/overlay), if any, that you want the capture driver to appear with when selected.  Some capture drivers spray garbage on the screen when overlay mode is first started, or impose irritating delays.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_PREFS_SLOW}}}{ Slow Preview/Overlay mode
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Some
 capture card drivers, such as the miroVideo DRX, have trouble rendering real-time overlays to certain video cards.  As a result, overlay video may be incorrectly rendered, or Windows may slow down, when windows, dialogs and menus appear on screen.  The }
{\i Slow Overlay}{ mode disables overlay when menus and dialogs are selected from VirtualDub\rquote s menu to avoid this problem.  Most TV tuner cards will not have this problem, though.
\par 
\par Preview mode requires that the CPU manually request frames and then submit them for decompression.  This can cause the interface to pause if hardware support is continually flipping between capture and decompression.  Choose }{\i Slow Preview}{
 to alleviate this situation.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_FRAMERATE}}}{ Frame rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Selects the number of frames to be captured per second.  N
ote that this value is not adjusted for the characteristics of the input device; if you select a frame rate of 30.00 fps against a live video signal with a 59.94Hz refresh, you\rquote 
ll probably get a 30.00 fps video stream with one frame duplicated every 33 seconds.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_LIMITLENGTH}}}{ Limit capture length
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
When enabled, this option causes AVICap to stop the capture after a specified duration.  If the approximate bandwidth and disk limits are known, this option is useful for making sure you do not run out of disk space; if this h
appens during a capture, the index block cannot be written out, and seeking in the resultant capture file will be very painful.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_DROPLIMIT}}}{ Drop limit
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Specifies the maximum rate at which AVICap is allowed to drop frames before aborting streaming capture.  This value is ignored for 
normal capture mode.  Note that AVICap seems not to care about this parameter, and in any case, it ignores the bursty nature of dropped frames.  It is included for completeness.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_MAXINDEX}}}{ Maximum index entries
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {A capture AVI file requires one in
dex entry for every video and audio frame in the file.  If this value is too low, the capture will prematurely stop.  A good rule of thumb is to add 1 index entry for every video frame, plus 4 for every second for audio, plus another 10% for your faith in
 your estimation skills.  If you are very tight on memory, you should consider reducing this value.  If not, the default 300K value is fine for captures smaller than 3 hours.
\par 
\par Normal capture mode does not use this value, since its AVI index buffer is dynamic.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_VIDBUFLIMIT}}}{ Video buffer limit
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Specifies the }{\i maximum}{
 number of frame buffers to allocate; the capture driver may not be able to allocate all requested buffers.  Video buffers hold data when the output device is unable to immediately store images.  If a video buffer
 is not available when a frame is captured, the frame is dropped.  Increase this value if you notice frames are consistently dropped when hard disk access occurs.
\par 
\par Normal capture mode requires a high number of video buffers, about enough to cover the time spent in writing a megabyte of data to the hard disk.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_AUDIOBUFFERS}}}{ Audio buffer limit and size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Audio buffers hold sound while the output device is busy.  The AVICap default, used when 0 is specified in the dialogs, is 4 buffers of 10K each, which will hold anywhere from \'bc
 to 4 seconds of PCM audio data.  Since avoiding dropped audio is very important, this value should be increased when high-bandwidth audio formats are used.  AVICap imposes a limit of 10 buffers.
\par 
\par For normal capture mode, you should have enough audio buffers to hold at least a couple seconds of sound.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_SETTINGS_LOCKDURATION}}}{ Lock video stream to audio
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {If this box is checked (VfW 1.0 mode), the video stream\rquote 
s framerate is tweaked so that the audio and video streams are equal length.  When unchecked (VfW 1.1+ mode, the 
default), the video stream will not be modified, and the two streams are of different lengths.  This box should normally be left unchecked, since checking it may desynchronize the two streams, but some applications may require VfW 1.0 mode.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This option does nothing if you are not capturing in compatibility (AVICap) mode.
\par }\pard \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 IDH_CAPTURE_HISTOGRAM}}}{ Histogram
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
This graph allows you to check if the incoming capture is too bright, dark, washed out, or has too much contrast.  Click on the graph to switch between, luminance, red, green, and blue modes.  The graph i
s logarithmic; every 8 pixels is another power of two.  Histogram mode uses whatever capture settings are currently set.
\par 
\par Note that the histogram may not function correctly if a capture board supporting hardware compression such as MPEG or MJPEG.  If this is true, you may get decompression errors instead of a histogram.  This is unfortunately normal.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CAPTURE_VUMETER}}}{ Volume meter
\par }\pard\plain \ql \fi-540\li540\ri0\widctlpar\tx540\faauto\rin0\lin540\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b Note:}{\tab You should set the audio format before using this.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {The Volume Meter shows how loud incoming audio is.  If you have a mono PCM audio form
at, only the center channel will be displayed; otherwise, both L/R channels.  The blue bars end at the average volume, and the red bars end at the peak volume.  You\rquote 
ll want to adjust the mixer controls in Volume Control so that the average volume is high, but little or no clipping of peaks occur.
\par 
\par Volume Meter doesn\rquote t work when a non-PCM format such as ADPCM or MPEG Audio Layer 3 is selected, and also uses Wave Mapper, and so may use the wrong audio device when multiple sound cards or a capture card with built-in audio support is installed.

\par \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VFR_FRAMERATE}}}{ Frame rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Controls how fast video frames are displayed, in frames per second (fps).  Common values are 10, 15, 24, and 30.  Decimal values are also permitted, although some rounding may occur.
\par 
\par Note that if an audio 
track exists, the two will lose (or regain) synchronization if the video frame rate is changed.  This can sometimes restore sync to a file that was improperly stored or modified.  In some cases, the proper frame rate can be found by matching the lengths o
f the two streams (the 3rd option); this most often works with capture files.
\par 
\par The frame rate can be adjusted without requiring recompression.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VFR_DECIMATION}}}{ Frame rate decimation
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Directs VirtualDub to cut the video stream down to some integral factor of its original f
rame rate (VirtualDub does not do fractional decimation).  This ensures that you will always get exactly 1/2, 1/3, etc. of the original frames in the file.  Fractional decimation, which is what some utilities like VidEdit use, can result in uneven results
 if the original was at an odd frame rate.
\par 
\par Frame rate decimation only works properly without recompression if only keyframes are left after decimation.  The framerate is always dropped accordingly, so audio and video will synchronize the same as before the decimation.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VDEPTH_INPUT}}}{ Decompression video depth
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16 
Allows you to select 16-bit HiColor (5:5:5) or 24-bit TrueColor (8:8:8) as the destination depth for input video decompression.  It has no effect on uncompressed files.  In most cases, you should choose 24-bit mode
, since 16-bit mode may lose some color depth.  However, if the decompressor functions better with a 16-bit output, then 24-bit may not be a viable option.}{
  Some video formats only store 16-bits worth of color anyway, so 16-bit might be faster with no penalty.
\par 
\par The Microsoft Video 1 compressor, for example, only supports 8-bit and 16-bit compression, and does not store 24-bit color.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VDEPTH_OUTPUT}}}{ Output video depth
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16 Allows you to use 16-bit HiColor (5:5:5), 24-bit TrueColor (8:8:8) or 32-bit TrueColor (8:8:8:8) as sour
ce depth for output compression.  In most cases, 24-bit is best because it preserves the most color while only requiring 75% as much memory as 32-bit mode (and thus is faster).  Use 16-bit or 32-bit mode if you are outputting uncompressed video, or if the
 compressor functions better with those color depths.}{  Some compressors may not function with 32-bit input.}{\cs16 
\par 
\par With uncompressed video, this makes the biggest difference in file size.  A 16-bit raw AVI is a full third smaller than a 24-bit AVI.}{
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VCLIP_RANGES}}}{ Start/end offsets, length
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Controls what subsection of the video stream is processed.  You can enter in offsets in either source frames or milliseconds (ms), but VirtualDub only remembers the offsets in milliseconds.  Length can be entered in instead of the end offset
, but again VirtualDub only remembers the end offset, and not the length you specify.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VCLIP_OFFSETAUDIO}}}{ Offset audio to maintain a/v sync
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {When checked, adjusts the audio start to correspondingly match the video start you specify.  If you start 500ms past the beginning, t
he audio will also begin 500ms past its original start.  When unchecked, the audio stream is processed from the beginning regardless of how far ahead the video processing starts.
\par 
\par In most cases, this should be checked.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_DLG_VCLIP_CLIPAUDIO}}}{ Cut off audio when video stream ends
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Slices off enough audio so the video and audio streams are of equal lengths; has no effect when the audio stream is same or shorter length than the video.  Most video players, though, when confronted with an audio stream that is longer, will simply disp
lay the last video frame again and again while the remainder of the audio stream plays.  If the tail of the audio stream is silence, this can be very annoying.  Use this option to cut off this '\'94tail.\'94
\par }{\cs16 \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_SETUP_BENCHMARK}}}{ Benchmark
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Allows you to specify capture settings a
nd run a disk benchmark test to see if your hard disk can handle the necessary bandwidth.  This tests gives more information than VirtualDub does during capture, and can help you figure out if dropped frames are due to a disk I/O problem, not enough CPU p
ower, or a combination of the two.
\par 
\par This test is more appropriate for video captures than a general-purpose disk performance test such as the one in Norton Utilities.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_SETUP_INSTALL}}}{ Install AVIFile handler
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This AVIFile handler allows VirtualDub to hook into the general
ized AVI file parsing routines and fake an AVI file for applications that expect one.  You can then set up VirtualDub for clipping and filtering options and stream the processed AVI directly to the application without having to save a temporary AVI to dis
k first.  This is perfect for when the temporary AVI file would be too large to store on disk.
\par 
\par Some applications bypass AVIFile and thus cannot  take advantage of this support.  Xing Technology\rquote s XingMPEG Encoder is an example. 
\par 
\par Three registry keys are added and two DLL files copied to your WINDOWS\\SYSTEM directory.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_SETUP_UNINSTALL}}}{ Deinstall AVIFile handler
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Removes the AVIFile handler from your system.  This deletes the registry keys and DLL files added before.  You can always reinstall the AVIFile handler if you need it later.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_SETUP_REMOVE}}}{ Remove VirtualDub personalized settings
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Deletes VirtualDub preferences from your Registry.  This includes all capture settings, recently used file lists, etc.  Note that this deletes settings for }{\i all}{ users!
\par 
\par This does not delete any of VirtualDub\rquote s program files, nor does it deinstall the AVIFile handler.
\par \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_FRAME_SIZE}}}{ Frame size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Specifies the size of a video frame.  You can specify a size in bytes, as in }{\b 153600}{, or in 1024-byte kilobytes, as in }{\b 150K}{
, or a frame dimension in width-height-depth, as in }{\b 320x240x16}{.  This defines the basic unit around which other parameters depend.
\par 
\par If you use video compression, you will want to approximate the frame size here.  A good estimate is the average frame size; if the video compression is not very consistent with frame size, then overestimate a bit to be sure.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_FRAME_COUNT}}}{ Frame count
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
How long the test should last, in frames.  The longer the test is, the more reliable the results; if you want to be absolutely sure, make the test long enough that your hard drive\rquote s thermal calib
ration will have kicked in at least once during the test.  If this value is too small, parts or all of the captured data may fit in the disk buffer, which will exaggerate your performance; but if you plan to do very short captures, this may be what you wa
nt.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_FRAME_BUFFERS}}}{ Frame buffers
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The number of frames that can be held in memory while disk I/O is in progress.  This is a very important value; set it to the actual number of video buffers you will have during a real capture.  More buffers means more memory, but decre
ases the chance of intermittent dropped frames.  However, extra frame buffers cannot compensate for an insufficient hard disk write speed.  You will seldom need more than 50 buffers.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_FRAME_RATE}}}{ Frame rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Sets the number of frames per second to simulate.  Decimal 
values are allowed.  The actual test may be slightly slower or faster than the specified value, because video capture speeds are measured in microseconds, while the system timer used for this test is only accurate to the nearest millisecond at most.  For 
values below 60fps, though, it is accurate enough for the purposes of this test.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_DISK_BUFFER}}}{ Disk buffer
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Sets the size of the disk buffer in kilobytes, and thus the I/O size, for writes to disk.  The larger this is, the better disk performance you\rquote ll get, but the more buffers you\rquote 
ll need.  Buffers smaller than 256K tend to cause too much disk activity, while buffers larger than 2-4Mb require too many frame buffers without giving much more performance.  512K and 1024K are usually good values.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_DATA_RATE}}}{ Data rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How much disk bandwidth will be necessary just for writing out capture data alone.  The \lquote actual\rquote 
 bandwidth needed will be about 10-25% higher with disk caching off or possibly as much as 100% more with disk caching on, for head seeks and overhead.  If your hard drive 
sustains a 4Mb/s transfer rate, you should not expect to be able to get more than 3-3.5Mb/s during actual capture.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_BENCHMARK_BUFFERING}}}{ Buffering modes
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Tells Windows 95/98/NT how it should handle disk I/O for the capture file.  The default mode allows Windows to both delay 
and buffer writes, and is the mode that AVICap uses.  The second mode uses the FILE_FLAG_WRITE_THROUGH mode, and tells Windows not to delay writes, although it may buffer them.  The third mode additionally uses the FILE_FLAG_NO_BUFFERING mode, which also 
prohibits buffering; this is the mode used by VirtualDub with normal capture mode.
\par 
\par Of the three modes, the second seems to be the worst, but may depend on your hardware \endash  YMMV.  Full buffering tends to be inappropriate for video capture because of the hi
gh data rate, especially when Windows delays writing the data to disk.  No buffering tends to be the best solution when your data rate starts to push the limits of your hard disk.\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain 
\s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_MAIN_OUTPUTCOLORDEPTH}}}{ Output color depth
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Selects the default color depth for quick previews activated through the position control.  This will normally be set to }{\b 
16-bit (Fastest)}{ because on most accelerated video cards, 16-bit drawing is faster even in 24-bit mode.  }{\b Match display depth }{is the best choice if you want the highest quality possible (i.
e. 24-bit depth in 24-bit video modes) while still using lower depths in shallower displays for speed.  }{\b Use output setting}{ forces VirtualDub to use existing dub settings.
\par 
\par If your video drivers prefer one format over another, you may find it beneficial to force the format by specifying it directly.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_MAIN_PROCESSPRIORITY}}}{ Process priority
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Specifies how much priority VirtualDub should have over other tasks in the system.  By default, this is }{\b Normal}{
 for regular dubs and }{\b Higher}{ for previews under Windows 95 (it stays }{\b Normal}{ under NT).  
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_MAIN_ADDEXTENSION}}}{ Automatically add extension to filename when saving
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Forces an }{\f2 .avi}{ extension on output AVI files, meaning that entering }{\f2 junk}{ in the Save AVI dialog will save the output as 
}{\f2 junk.avi}{.  This also causes extensions to double if you enter in another extension; }{\f2 junk.vid}{ would become }{\f2 junk.vid.avi}{
, effectively making it impossible to save with an alternate extension.  This annoying behavior is disabled by default, but may be useful to those who dislike typing full filenames.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_DISPLAY_16BITDITHER}}}{ Enable 16-bit dithering
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {16-
bit RGB is very good for video display, but can still show banding artifacts in large, shallow gradients.  In very specific situations, banding can be quite noticeable.  This option causes VirtualDub to dither 24-bit video down to 16-bit by combining the 
closest colors in patterns.  It is a purely display-oriented option and only affects Preview mode.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_SCENE_INTERFRAME}}}{ Interframe threshold
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Controls how much of a difference between successive frames constitutes a scene change.  If this is set too low, VirtualDub will stop 
more often than it needs to; if the threshold is too high, transitions may be missed.  Generally, this setting affects VirtualDub's ability to detect cuts and other quick scene changes.  The threshold applies only to luminance changes, since chrominance i
s completely ignored during scene detection.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_SCENE_INTRAFRAME}}}{ Intraframe threshold
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Sets the lower threshold at which VirtualDub considers a frame "empty."  Empty frames usually signify gradual fades, and the intraframe threshold allows VirtualDub to spot such transitions \endash 
 they are too gradual to be caught by the interframe system.  Increasing this threshold makes VirtualDub less picky about detail in the picture, and thus raising the threshold can be beneficial when working with noisy video.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_CPU_OPTIMIZATIONS}}}{ CPU optimizations
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This allows you to override CPU-specific optimizations that VirtualDub normally enables and disables automatically.  }{\b 
MMX optimization}{ is very important; if you have an MMX-capable CPU, many of VirtualDub's video operations double or triple in speed.  Turning it on with a non-MMX CPU is harmless.  }{\b FPU optimization}{ currently affects only one filter \endash 
 resize, in bilinear mode \endash  but really speeds up bilinear resizes on 486s and Pentiums without MMX.
\par 
\par For all Intel CPUs and AMD K6's, default optimizations should suffice.
\par }\pard\plain \s19\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_AVI_RESTRICT_1GB}}}{ }{\b Restrict legacy AVI support to 1Gb}{
\par 
\par AVI 2.0 files have a \'93legacy\'94 portion that can be read by older applications; the rest is inaccessible except by applications that can read AVI 2.0 files, such as Windows Media Player.  By default, VirtualDub will t
ry to squeeze up to 2Gb of AVI data into the legacy portion before switching to the extended partition.  However, older programs like the 16-bit Media Player will refuse to access the AVI file at all if the legacy partition exceeds 1 gigabyte.  Turning th
is option allows such programs to access the legacy partition.  However, it shortens the amount that can be read by applications that accept up to 2Gb of AVI data.\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_PREFS_AVI_AUTOCORRECT_L3}}}{ }{\b Do not correct MPEG Layer III auto stream byterate}{
\par 
\par All AVI audio streams have a value that
 specifies how much space a second of audio takes up.  Players then use this value to convert between time and byte position in the audio stream.  Unfortunately, the Fraunhofer-IIS MPEG audio layer 3 codec does not always compute this value properly, resu
lting in files that do not have proper synchronization when played back.  By default, VirtualDub will detect the flawed codec and will automatically correct the bad byterate value for you.
\par 
\par If you have applications that expect the flawed value, or want to manually correct for the error yourself by adjusting the framerate, enable this option to disable VirtualDub\rquote s automatic byterate correction.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_mainwindow}}}{ The video capture window
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par This is what VirtualDub\rquote s main window looks like in video capture mode. 
\par 
\par \{bml capwindow.shg\}
\par 
\par Click on a feature for more information.  Hold down Ctrl and Tab at the same time to highlight all the areas you can click on.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_bandwidth}}}{ Bandwidth indicator
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This shows VirtualDub\rquote s best guess as to how fast data will be written to disk, including video
, audio, and AVI file overhead.  Thus, 5000K/s means your hard drive will have to write about 5 megabytes per second to not drop frames.  The value is most accurate with uncompressed RGB video and PCM audio; it can get confused with compression, even MJPE
G.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_quickrate}}}{ Quick framerate chooser
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This small button shows the currently selected frame rate.  Click on it to choose one of many predefined frame rates.  A couple of \'93
millisecond friendly\'94 rates are included for those stuck with Zoran drivers.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_quickaudio}}}{ Quick audio format chooser
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {This small button displays the currently selected audio format.  For PCM, it displays a string such as \'9344K/16/s\'94
, which in this case means 44KHz, 16-bit stereo audio, or CD-quality.  Compressed audio formats show up only as a sampling rate (\'9344.100Hz\'94).  Click on the button to choose one of the standard PCM audio formats.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_statusbar}}}{ Status bar
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
Generally helpful information appears here, such as Video for Windows (VfW) status messages.  During capture, this bar displays frame timing diagnostics.
\par 
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_framescaptured}}}{ Frames captured
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Exactly what it says: the number of video frames captured so far.  Not very interesting, but very important.  If this value stops, you
\rquote re in big doo-doo.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_totaltime}}}{ Total time
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How long the capture has been going, in }{\i days}{ : }{\i hours}{ : }{\i minutes}{ : }{\i seconds}{.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_timeleft}}}{ Time left
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {VirtualDub\rquote 
s projection for how long the capture can run before you run out of disk space or hit the operating system file size limit.  This value is updated in real time, so if the capture card starts putting out bigger video frames, or anothe
r program starts stealing space on the disk, the value will change accordingly.  Note that this doesn\rquote t take into account pre-allocated space in the file.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_diskspacefree}}}{ Disk space free
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Self-explanatory, except that the value tends to drop in half-megabyte increments 
(0.5Mb).  This is because Windows allocates half-megabyte chunks to try to reduce disk fragmentation.  This allocation strategy doesn\rquote t affect the size of your files or how much free space you\rquote ll have after the capture is finished.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_cpuusage}}}{ CPU Usage
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shows you how much of your CPU power is being used.  Running above 90% is usually an indication that you\rquote 
re overcommitting your CPU or your hard drive and need to back down some of the capture parameters, like frame rate or size.  If you hit 100% for more than a short time, you will usually drop frames.
\par 
\par This is the same value reported by System Monitor, by the way.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_size}}}{ Video: Size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How much video data has been written to disk.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_averagerate}}}{ Video: Average Rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The average frame rate for frames written to disk.  If you have a good capture card and haven\rquote 
t dropped any frames, then this value will be exact or very, very close to the frame rate you\rquote ve picked.  If you do drop frames, then this value will drop accordingly.  If you haven\rquote t dropped any frames, and this value doesn\rquote t match
 your selected frame rate, then it\rquote ll tell you what rate your capture card is really capturing at.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_datarate}}}{Video: Data Rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How much bandwidth the video stream is taking on disk.  This value is always accurate.  It\rquote 
s not uncommon for this value to be different than what you tell your capture card to capture at, particularly if the scene is very simple; it doesn\rquote t take that many bytes to represent a black screen.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_compression}}}{Video: Compression
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {An approximate measure of what kind of video compression ratio you\rquote re getting.  1.0:1 means you\rquote 
re capturing uncompressed.  This value is dead-on if VirtualDub is doing the video compression; its accuracy with hardware compression is dubious at best since the \'93uncompressed\'94 video format isn\rquote t clear.  Obviously, higher is better.  This 
value will unfortunately always be 1.0:1 in AVICap mode due to Video for Windows restrictions.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_avgframesize}}}{Video: Avg Frame Size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
The average size of a video frame.  For instance, this panel was taken from a screenshot of a 640x480x24-bit uncompressed capture, so 640
 x 480 x 3 = 921600 bytes per frame.  Compressed frames vary in size, so this value will usually wander a bit with compressed video, particularly when the scenes get very simple, such as a fade-out, or very complex.  In AVICap mode, this value only shows 
the pre-compression (uncompressed size).
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_video_framesdropped}}}{Video: Frames Dropped
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
How many frames are missing.  VirtualDub only receives timing information, and this value simply indicates how many dummy frames it inserted to maintain proper timing.  You can get dropped frames because your computer can\rquote 
t keep up, and thus the capture hardware didn\rquote t have a buffer to place a frame in and simply dropped it, or the frame wasn\rquote t available to begin with, as might happen with an awful VHS tape.  Note that this is a bit of a misnomer \endash  a 
\'93dropped frame\'94 means you have an }{\i extra}{ frame in your output to replace the holes in the capture stream.
\par 
\par If you aren\rquote t using compatibility mode capture and have timing correction enabled (default), then this value will also reflect correction actions by the timing corrector to keep the audio track synchronized to the video.
  This includes inserting and dropping frames; if the timing corrector drops a frame, you won\rquote t be able to find it in the resulting file.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_audio_size}}}{Audio: Size
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How much audio data has been written to disk.  Didn\rquote t know that CD-quality audio consumes 176K per second?  Now you know.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_audio_averagerate}}}{Audio: Average rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The rate at which the sound card is supplying audio data.  This should be close to the sampling rate; because of varied timing in the 
multimedia system, it\rquote s normal for this value to be a little bit off.  If you\rquote re getting 40000Hz when you requested 44000Hz, though, then you\rquote re in trouble.  The value gets more accurate with longer captures.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_audio_datarate}}}{Audio: Data rate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {How much bandwidth the audio
 stream is taking up, in kilobytes per second.  This value should be relatively constant.  Watch this value; audio shouldn\rquote t be taking up a huge amount of bandwidth compared to video.  If you\rquote 
re capturing at low frame rates, you might be able to significantly increase your maximum capture time by dropping the audio format a bit.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_win_audio_compression}}}{Audio: Compression
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {The compression ratio you\rquote 
re getting, versus uncompressed pulse code modulation (PCM) data.  Most people capture PCM audio, so this value will normally be 1.0:1
.  ADPCM normally gets 3:1 or 4:1, and formats such as MP3 can get 10:1.  For compressed audio, VirtualDub always assumes a 16-bit input, even if your sound card is 8-bit, because audio compression is usually designed to accept 16-bit input for quality.

\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_avicapvinternal}}}{AVICap (compatibility) mode capture
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub supports two main methods of capturing video to disk.
\par 
\par AVICap is the normal capture method used by Video for Windows; an application says \lquote capture\rquote , and Video for Windows creates the AVI file automatically.  In regular capture mode 
causes VirtualDub to take over the job of creating the AVI file, which allows it to do neat things to the file.  However, you may find the need to drop back to AVICap, depending on your system configuration and capture settings.
\par 
\par These features function in both modes:
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li720\ri0\widctlpar\jclisttab\tx720\faauto\ls2\rin0\lin720\itap0 {Stop conditions
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}RGB filtering
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}File size, disk space, CPU usage, and frame timing monitoring
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par These features only work in normal mode:
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li720\ri0\widctlpar\jclisttab\tx720\faauto\ls3\rin0\lin720\itap0 {Adaptive data rate regulation during compression
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}OpenDML 1.02 AVI file creation (>2Gb)
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Striped capture
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Multisegment capture
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}High-performance disk I/O with enhanced buffering
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Audio sync correction
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Depending on your capture drivers, disk performance, and CPU speed, you may get fewer dropped frames in AVICap mode, because VirtualDub moves more data around in normal mode for buffering.  C
onversely, Video for Windows has a tendency to redline the CPU when disk buffers fill up, causing dropped frames; normal capture mode is often able to avoid this.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_pickformat}}}{Picking a video format
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par There are actually two values to choose: how big of a video frame (resolution) and how fast you want those frames (framerate).  Unless your system is buff enough to support the maximums for both, you\rquote 
ll have to trade off between frame size and frame rate.
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7}{\tab Most \'93hobby\'94 video is captured at 320x240, at 10, 15, or 30 fps.\line 
\par }{\f3 \'b7}{\tab For non-linear editing (NLE), or any situation where the video will be output to tape again, capture at as high a quality as possible to preserve the video.  If you can\rquote t do that, emphasize frame rate over  resolution.\line 
\par }{\f3 \'b7}{\tab Try and pick the frame size you\rquote re going to use.  If you\rquote re going to make a 320x240 video, it doesn\rquote 
t make much sense to capture at 640x480, especially since it takes four times the space to do so.  Some vidcap hardware can\rquote t capture below 320x240, so you might be stuck capturing lar
ger than you want.  Also beware of reducing the vertical resolution; sometimes this results in scanlines simply being dropped (point sampling), making smooth edges jagged.  In this case, it\rquote 
s better to capture at x240 or x480 and scale the results down later.\line \line }{\b Warning}{
: If you are capturing with an SGI Visual Workstation, capturing all scanlines (a height of 480 in NTSC) is highly recommended.  When capturing at smaller sizes, the Cobalt drivers scale down the two fields independently and then interlace the 
results.  A 320x240 interlaced video looks }{\i nasty}{.\line 
\par }{\f3 \'b7}{\tab It\rquote s best to capture at even divisions of the source frame rate.  For NTSC, the highest frame rate you can get is exactly 29.97 fps \endash  if you want to capture all frames, use }{\b exactly}{ this value.  It\rquote 
s on the quick menu, incidentally. \line \line Those with Zoran drivers (including the Iomega Buz drivers) won\rquote t be able to capture at 29.97 fps.  In that case, use 29.412 or 30.303 fps instead.  These values are also on the quick menu.\line 

\par }{\f3 \'b7}{\tab Ordinarily, do not set the frame rate higher than 30 fps.  NTSC video runs at 59.94 fields per second, but these are half-frames and two of them interleave together to form a full frame.  Capturing video with a vertical resolution of 480 
\endash  640x480, for example \endash  at a frame rate of 29.97 fps will get all the fields.\line \line This presents a problem for video games, which often do output 59.94 or 60 frames per second, because capture cards still won\rquote 
t capture at 60fps in these cases.  There is a workaround, though, if you have an MJPEG card.  }{\uldb See workaround}{\v vidcap_tips_consoles}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_adjustlevels}}}{Adjusting video and audio levels
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par For a successful capture, you must adjust your audio and video levels so that the sound is at the right volume and the picture is neither too bright nor too dark.  If you adjust levels correctly the first time, you can avoid a corrective pr
oduction step later on, which is especially important when working with very large files.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Adjusting audio levels
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Before you capture, bring up VirtualDub\rquote s volume meter (V), and check the volume levels.  You want the volume level high enough for the red b
ar to almost reach full volume at the loudest point in the video.  Always choose quieter over louder; as long as the volume level isn\rquote t }{\i too}{
 low, you can always amplify the audio afterward, but if the volume level is too high the sound will clip and you\rquote ll 
lose sound information.  16-bit audio helps greatly here, because it has much more precision than 8-bit and so the volume level need not be as perfect for great sounding audio.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Adjusting video levels}{\b0 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par The same basic principle for audio applies here as well: too soft is correctable, too loud is not.  Bring up VirtualDub\rquote s video histogram (H), or preferably, the preview histogram (Shift-P).  The preview histogram won\rquote 
t work on all cards but is much easier to use because you can view the histogram as you adjust.  Use the capture card\rquote s brightness and contrast settings, usually under the }{\i Video Source}{
 dialog, to tweak the incoming video.  The histogram indicates the breakdown of brightness levels in the image; far left is darkest, and far right is brightest.
\par 
\par Pi
ck a scene with plenty of dark and bright areas, and examine the histogram.  Use the brightness control to center the histogram, and the contrast adjustment to control the width.  Ideally, a scene with black and white should have the tips of the histogram
 touching the left and right sides of the graph.  If your settings are too dark, counts will pile up into a high line on the left, and similarly, too bright settings will cause piling up on the right.
\par 
\par Finally, do not rely on your monitor to check the black
 level.  If black areas are showing up as gray, the brightness definitely needs to be lowered, but monitors are often adjusted so that a lot of dark grays appear as black.  Failing to properly adjust so that black is, well, black, can cause washed-out vid
eo when you output back to tape.
\par 
\par 
\par 
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_optimizehd}}}{ Optimizing your hard disk
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\b Rule #1: Upgrade to Windows 98 (if you\rquote re running 95).
\par }{
\par Windows 98 admittedly doesn't do much for normal disk access, but it has changes in its disk subsystem that can optimize large, unbuf
fered writes to the hard disk.  I noticed a significant drop in disk activity during 1.5Mb/s captures after upgrading to 98.
\par 
\par Make sure that your capture hardware supports Windows 98, however.
\par 
\par }{\b Rule #2: Fastest PIO/DMA mode your hard disk supports.}{
\par 
\par }\pard \ql \fi-900\li900\ri0\widctlpar\tx900\faauto\rin0\lin900\itap0 {Warning:\tab This is not for the faint-hearted.  There is a remote possibility that these instructions may cause data corruption under certain circumstances.  If you don\rquote 
t want to risk it, feel free to skip this step since it is by no means necessary.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Reboot your c
omputer, and mark down the PIO modes your BIOS supports when it boots.  Then enter BIOS setup and see if you can change the I/O modes of your IDE hard disks.  For every drive that is not at PIO Mode 4, bump the PIO mode up by 1 and test thoroughly each ti
me.  You probably won\rquote t speed up your hard disk this way, since Mode 0 is already 5Mb/sec, and Mode 2 is 10Mb/s, but it\rquote ll take less CPU time for disk transfers.  Don\rquote 
t rely on BIOS auto-detection, since some drives are detected as Mode 2 but can do Mode 4.  Note that not all BIOSes support this tweaking.
\par 
\par Once you\rquote ve done that, if you have the OSR2 version of Windows 95 (4.00.950b) or Windows 98, then open up System Properties in Control Panel, and choose the Device Manager.  Select each IDE hard drive under \'93Disk Drives\'94
 and under its Properties, check the \'93DMA\'94 box.  Not all drives and controllers support DMA, so the next time you reboot, some of these boxes may be unchecked.
\par 
\par Note that some drives don't transfer fast enough to push beyond Mode 0 or 1 limi
ts.  That doesn't mean you still shouldn't raise the mode, or enable DMA; both will decrease the amount of CPU time required to read/write to the disk, as well as free up the IDE bus for the other drive (if you have another drive on the same port) to tran
sfer data.
\par 
\par If you have a SCSI drive, try running the configuration utility for your SCSI card.  On Adaptec controllers, you may be able to run the SCSISelect utility by pressing Ctrl-A right before the boot process starts.  There, you can increase the SCSI
 transfer rate.
\par 
\par If at }{\i any}{ time you notice funnyness happening with your computer, immediately degrade the PIO/DMA rates back to their original levels until you\rquote ve ascertained that higher values are safe.
\par 
\par }{\b Rule #3: Faster partitions to the front.}{
\par 
\par In almos
t all hard drives, partitions nearer to the outside (start) of the disk are faster.  On my 3.5Gb Maxtor, a partition on the outside of the disk is about 20-30% faster than a partition on the inside.  If you only have one hard drive, you should partition i
t so that the capture partition is either C: or D:.  PowerQuest\rquote s Partition Magic is a good utility for doing this.  Generally, any good advice that applies to the placing of swap files also applies to video captures.
\par 
\par Note that the position of the actual data matters, not the size or position of the partition it\rquote 
s in.  If you split a hard drive in half, data at the end of the first partition will be read at the same speed as data at the start of the second.  This also means that if you have a very big parti
tion, the start of the partition may be significantly faster than the end.
\par 
\par }{\b Rule #4: Either defragment, or delete everything}{
\par 
\par Windows 95/98 exhibits better disk performance when writing to an empty disk partition than one with files on it, especially when AVICap\rquote s I/O system is being used.  If this isn\rquote 
t possible, at least defragment the partition with a utility such as Microsoft Defrag or Norton SpeedDisk.  If you haven\rquote t created the capture file yet, you can choose \lquote Defrag free space\rquote ; if you have already
 created the right size capture file and have plenty of time, defragment the capture file as well by choosing Full Optimization.
\par 
\par For Norton SpeedDisk users, use the Advanced options to push files on the capture drive to the end of the partition, and to force any prepared capture files to the front.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_dropframes}}}{ Dropped frames and how to avoid them
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par A }{\i dropped frame}{ occurs any time a frame is supposed to be written to disk, but isn\rquote t because the system isn\rquote t fast enough.  The result is a \'93null frame\'94 in the file that 
takes up virtually no space and simply mimics the last frame.  More dropped frames means a jerkier video file.
\par 
\par Ultimately, the goal is to have no dropped frames.  This is important for the following reasons:
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Dropped frames usually come in bursts.  Your
 AVI file will usually have large jerks in it instead of slight, regular jitters.
\par }{\f3 \'b7\tab }{If you are compressing the video in real-time, dropped frames occur when the data rate is the highest.  Usually, this is when the most action occurs in the video \endash  the }{\i worst}{ time.
\par }{\f3 \'b7\tab }{Dropped frames are noticeable at 15fps and very irritating at 10fps and lower.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par If you are getting dropped frames at a certain framerate, you should }{\i never}{ try to increase the framerate to \'93grab as many frames\'94 as you can, because you\rquote ll end up wi
th a very jerky video and less frames than if you used a lower data rate.  Instead, try the following:
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{\uldb Optimize your hard disk}{\v vidcap_tips_optimizehd}{.
\par }{\f3 \'b7\tab }{Increase the number of video buffers.
\par }{\f3 \'b7\tab }{Make sure no other applications are running when you capture.
\par }{\f3 \'b7\tab }{Try VirtualDub\rquote s normal capture mode.
\par }{\f3 \'b7\tab }{Before you start capturing, turn off real-time overlay or even preview.  If you need to see the video to start the capture, use the }{\i Hide on Capture}{ option.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par In addition, if you are using video compression:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Try decreasing the quality or modifying the keyframe interval.
\par }{\f3 \'b7\tab }{If your hard drive can\rquote t keep up, but your CPU can, try }{\i increasing}{ the compression quality.
\par }{\f3 \'b7\tab }{Use a better video source, or capture live if you can.  The better the source quality, the higher and faster the compression.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par If your video capture device isn\rquote t the same as your sound capture device (i.e. audio and video capture aren\rquote t integrated onto the same board), you may not be able to avoid dropped frames, because VirtualDub will have to insert o
r drop frames to keep your audio in sync.  This should only occur rarely, though \endash  no more than once every several hundred frames \endash  and only in sporadic drops, never large bursts.
\par 
\par Finally, one last cause of dropped frames, especially in normal capture mode, is hardware that isn\rquote t capturing at the average rate you tell it; this is reflected in normal
 capture mode by a steadily increasing or decreasing jitter value.  This is true for capture cards based on Zoran drivers, which will round all frame interv
als to the nearest millisecond; a framerate of 15.000 fps results in 15.151 actual fps, for instance.  (VirtualDub will detect some of these drivers automatically and warn you about this problem.)
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Watch the }{\b Average Frame Rate}{
 value.  After a few minutes, it should stabilize to the frame rate you have selected.  If it settles to a value different than what you chose, and you are getting dropped frames or bad synchronization, try using the Average F
rame Rate value as your capture frame rate and see if that clears up the problem.\line 
\par }{\f3 \'b7\tab }{\b Redlining the CPU at 100%}{ for more than a second or so often results in at least one dropped frame.  Watch the CPU usage meter to determine if your CPU is too weak to supp
ort the current capture configuration.  Slower hard disk performance often results in greater CPU usage.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page 
}{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_colorformats}}}{Color formats
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\b RGB (Red/Green/Blue) formats}{
\par 
\par The RGB format encodes color by breaking it down into red, green, and blue components.  No red, green,
 or blue encodes black; full red, green, and blue encodes white.  Two common formats are 16-bit (HiColor) and 24-bit (TrueColor).  16-bit (HiColor) can actually refer to either 15-bit RGB or the \'93true\'94
 16-bit RGB.  Both encode 32 levels of red and blue, bu
t 15-bit RGB, known as 5-5-5 RGB, encodes 32 levels of green while 16-bit RGB, or 5-6-5, encodes 64 levels.  However, 15-bit RGB takes the same amount of space as 16-bit RGB.  24-bit TrueColor, or 8-8-8 RGB, encodes 256 levels of all three channels.   Bec
ause 16-bit RGB takes two-thirds the space of 24-bit RGB without much loss in video quality, it is usually a better choice if you have to capture uncompressed video.
\par 
\par You may also find 32-bit RGB.  Most often this is simply 24-bit RGB with an extra pad byte added per pixel.  It thus takes one-third more space than 24-bit without any improvement in the picture.  Probably should be avoided.
\par 
\par If you happen to find an 8-bit mode, it is probably a }{\i palette}{ mode, where a set of 256 colors is constructed from a larg
er color space, typically 18-bit or 24-bit, and colors from captured frames are matched to one of the 256 colors.  Video that is one-channel only (grayscale) can take advantage of 8-bit mode, where 256 levels of gray can be encoded with half the space req
uirements of 16-bit, which can only encode 32 levels; but in most cases, 8-bit modes can be avoided.
\par 
\par Computer displays are RGB, so other video formats must be converted to RGB before they can be displayed.
\par 
\par }{\b YUV and YCrCb (Luminance/Chrominance) formats}{
\par 
\par These two formats are very similar, and for convenience\rquote s sake both will be referred to as }{\b YUV}{ here.
\par 
\par YUV encodes color as a single Y value, plus two U and V values.  The Y value holds the luminance, or brightness, of the pixel, while the U and V values dete
rmine the color.  This is based on the fact that the eye is more sensitive to luminance than color.  For this reason, some YUV formats also use }{\i chrominance subsampling}{
, where U/V color values are encoded for groups of pixels instead of single pixels, as with the luminance.
\par 
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {
The most common YUV format is YUV12, the native output of MPEG video decoders.  In YUV12, 8-bits of Y, U, and V are encoded, but only one U and one V value is included for every 2x2 group of pixels.  Each pixel has its own Y value.  This
 is equivalent space-wise to encoding 12 bits for every pixel.  YUV9 is similar, except the U and V values occur for every 4x4 group of pixels, changing the total to 9 bits per pixel.
\par 
\par RGB-to-YUV conversion is a common early step in many video encoders.  If you are encoding computer-generated graphics, you should beware of the YUV conversion, since chrominance subsampling can cause colors in the image to bleed slightly.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\fs24 \page }{\cs16\fs24\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_interlaced}}}{Interlaced vs. Noninterlaced video
\par }\pard\plain \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par \{bmc interlaced.bmp\}\{bmc non-interlaced.bmp\}
\par 
\par NTSC and PAL video both use a system called }{\i interlacing}{ to increase visible resolution.  A whole frame \endash  525 horizontal lines in NTSC, 625 in PAL \endash  is split into two }{\i fields}{
, which are sent back-to-back.  Scanlines from the two fields interleave with each other
 to form a complete picture with twice the vertical resolution, as shown on the left.  NTSC sends alternating fields of 262 and 263 scanlines at 60 fields per second; PAL sends alternating fields of 312 and 313 lines at 50 fields per second.
\par 
\par Frame sizes with }{\b 240}{ lines or less of vertical resolution usually cause }{\i non-interlaced}{
 captures, as shown on the right.  This is the same way your computer usually paints its screen: right-to-left, and top-to-bottom, just like how you read a book.  Your capture card co
ntinually grabs single frames and saves them to disk.  Non-interlaced captures off of video are limited to 60fps for NTSC, 50fps for PAL.  However, most capture cards in this mode stick to a single kind of field for the operation \endash 
 either even or odd --  and so the limit is usually either 30fps or 25fps.
\par 
\par If your vertical resolution is higher, such as }{\b 480}{, you are probably capturing in }{\i interlaced}{ mode, shown on the left.  Your capture card grabs two consecutive fields and combines them to form a single fram
e, which is saved to disk.  The main problem with interlaced capture is that the two fields don\rquote 
t have to correspond to the same frame.  Instead of capturing 30 (25) frames per second and encoding them into pairs of fields, video cameras actually send alternating fields of 60 (50) different pictures.  You\rquote 
ll often end up with frames like this:
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\{bml ball.bmp\}The ball was moving right in the original video, and captured with 480 lines of resolution.  Notice that the two fields captured don\rquote t match.  It wouldn\rquote 
t have mattered if the capture had started one field earlier; the result would have been the same.\line \line 
Any standard video compressor used with this video, except for MPEG-2, will probably mistake the interlacing for fine detail.  As a result, detail in othe
r parts of the picture will suffer, or the file will be larger than expected.  Motion-JPEG compressors also do not have a problem with interlaced video, because they compress interlaced frames as two separate fields.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_compositevideo}}}{ The caveats of composite video
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\i Composite}{ video is so named because it mixes luminance and chrominance information into a single signal.  Specifically, a technique known as }{\i quadrature encoding}{
 piles the color information in on a 3.579545MHz color subcarrier.  Go through the math for NTSC:
\par 
\par }\pard \ql \li720\ri0\widctlpar\tx3600\faauto\rin0\lin720\itap0 {Color subcarrier\tab 3.579545 MHz
\par Horizontal refresh rate\tab 15.735 KHz
\par (Color subcarrier) / (Horiz rate)\tab approx. 227.5 color clocks per line
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par What this means is that you must have at least enough signal quality to support 227.5 luminance pixels across an entire s
canline before you even begin to pick up color.  Not only that, but you'll need more bandwidth to be able to accurately represent color.  Basically, the color in any composite signal will degrade long before brightness information will; this is extremely 
apparent in VHS video, where color variation sets in after one generation or so.  For this reason, the }{\uldb TV filter}{\v filter_tv}{ should be used with composite video to clean up color artifacts unless the incoming signal is very clean.
\par 
\par After two or three VHS generations, sync degredation tends to be more of a concern than gross color, but the }{\i 5x5 I/Q average}{ option of the TV filter may help.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ vidcap_tips_consoles}}}{ A special case: Video game consoles
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Video game consoles present a special problem because they often output non-interlaced video.  This means a full 59.94 }{\b frames}{ and not }{\b fields}{
 per second.  If you try and capture 59.94 frames per second, the capture card will usually only supply half and drop the other half.  You can get all the picture information by capturing at twice the 
vertical resolution (usually x480), but then you have two frames meshed together.
\par 
\par VirtualDub can work around this problem if you can compress the video into Motion-JPEG (MJPEG) format.  Motion-JPEG compresses the two fields of an interlaced picture as two separate pictures, and VirtualDub can split these apart.  To do this, click the 
\'93extended options\'94 box when you open the AVI file, and select one of the MJPEG frame split options.  VirtualDub will then split all the frames in half and you can write the re
sult as a true 60fps file.  Normally, the unswapped mode will work, but you might have to choose the swapped option if frames are coming in out of order.  This works with both hardware and software compression.
\par 
\par Note that you must capture }{\i all}{ the frames (29.97 fps) and must capture the whole frame for this to work.  The trick relies on two frames being interlaced together, and so even if you capture at a lower frame rate you\rquote 
re always pulling pairs of back-to-back frames.  If you capture at odd vertical resolutions like 360, the two frames won\rquote t be evenly interlaced anymore and it\rquote 
ll look like crap.  You can reduce the horizontal resolution, though, so capturing at 320x480 will work.
\par 
\par Video came consoles also vary in resolution.  The Nintendo 64 cannot outpu
t high resolution video, and so its maximum resolution is 320x480.  The Sony Playstation can output both lores (320) and hires (640) video in both interlaced and non-interlaced modes, although most games such as Final Fantasy VII run lores, non-interlaced
.  The Super Nintendo normally only outputs 256 pixels across and stretches the video quite a bit, although it can also do 512.  Pay careful attention to what mode the game is running in and adjust your capture settings accordingly, }{\i 
especially if the game switches between interlaced and non-interlaced modes}{.  If the console switches to interlaced video, and you don\rquote t notice and split the frames anyway, the resulting video will look very jittery and strange.
\par 
\par Incidentally, some of the really old consoles, like the Atari 2600, are limited to as low as 160 pixels across.
\par \page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_intro}}}{Introduction to segmented AVI files
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par A number of video programs for Windows are now capable of skirting by the infamous two-gigabyte limit by splitting their output into a series of AVI segm
ents.  Each segment is a legal AVI file by itself, and video editors which cannot accept the OpenDML extensions for large AVI files can process the segmented video by concatenating the segments in the timeline.
\par 
\par As of version 1.2, VirtualDub can now generate and process such segmented files.  This method is not as clean as OpenDML-extended files, but is the most compatible method of escaping the two-gigabyte limit.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_readwrite}}}{Reading and writing segmented files within VirtualDub
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub automatically tags segments so that when you open the first segment, it will automatically load all of the rest.  To write a segmented file, simply use the }{\i Save Segmented AVI\'85}{ command on the File menu instead of }{\i Save AVI}{ or }{
\i Save extended AVI}{.  VirtualDub will take your base filename and insert a two-digit number right before the file extension.  Thus, if you choose to save as }{\f2 nuku-nuku.avi}{, the first section will be saved as }{\f2 nuku-nuku.00.avi}{
, the second as }{\f2 nuku-nuku.01.avi}{, and so on.  You can specify the maximum file size in megabytes, and also optionally a video frame limit.  VirtualDub will switch to the next segment before either limit is reached.
\par 
\par To open the segments in VirtualDub, simply use }{\i Open AVI}{ and leave the }{\i Automatically detect segments}{ box checked.  VirtualDub will de
tect its segment marker in the first file and search for subsequent files.  If you have to move some of the segments for disk space reasons, VirtualDub will ask you to point it to the next section whenever it cannot find a section by itself.  Alternativel
y, you can uncheck the }{\i Automatically detect segments}{ box on the initial open, and manually append segments with }{\i File > Append video segment}{.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_capture}}}{Capturing to AVI segments
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub can also capture on-the-fly to sequential AVI segments.  This removes file size barriers and limits file sizes essentially to only disk space.  It also places additional strain on the system\rquote 
s performance capabilities, so a system that is barely capable of capturing 30fps video will likely drop frames when trying to capture segmented.
\par 
\par The general process for capturing in segments:
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\widctlpar\jclisttab\tx360\faauto\ls15\rin0\lin360\itap0 {Set up a spill system of hard drives.
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Enable segmented capture.
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Don\rquote t use compatibility mode capture.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Video for Windows does not natively understand segments, so you cannot capture segmented using the compatibility (AVICap) mode.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b0\fs24 Spill systems
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub can keep track of multiple drives during capture, and scatter captured segments between them.  This means you can dedicate two hard drives for video capture and have VirtualDub use the fastest parts of both
 drives during a single capture.  This is done by defining a }{\i spill system}{ of drives for VirtualDub to use when an individual segment or drive is full and the program needs to find a place to put the next file.  For this, choose the }{\i 
Capture > Spill System\'85}{ menu option.
\par 
\par Each spill drive entry has three values: priority, space threshold, and path.  Spill drives are ranked first by priority; VirtualDub will not use lower priority drives until all higher priority drives are full.  This allows you to relegate le
ss useful drives to \'93emergency status,\'94
 for use only when space is very short.  For drives with the same priority, VirtualDub chooses the drive with the most space for the next segment.  Thus, if two 10Gb drives are on the list, AVI segments will be altern
ately placed between them, and both drives will be used roughly equally as the capture progresses.  The path allows you to choose where the files go, and the space threshold allows you to specify how low the amount of free disk space can drop on the drive
 before VirtualDub deems it unusable for capture.  A value of 50 would tell VirtualDub not to use the drive if it cannot create a decent-sized segment without dropping the free space }{\i roughly}{ below 50 megabytes,
\par 
\par }\pard \ql \fi-720\li720\ri0\widctlpar\tx720\faauto\rin0\lin720\itap0 {\b Note:}{\tab Windows is only accurate to roughly one
 megabyte when computing free disk space that has files being expanded.  Disk space estimates can be off by several megabytes during the capture operation.
\par 
\par }{\b Note:}{\tab Do not add a hard disk partition to the list more than once, even with different paths.  This causes incorrect free disk space estimates, and can cause VirtualDub to act unpredictably.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_export}}}{Exporting segmented files to traditional video editors
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Traditional video editors are designed to connect independent video clips, and not to combine video segme
nts chopped from a continuous stream.  Thus, they will insert dead space or trim the ends of the video as necessary to ensure that the video clips maintain their audio/video synchronization.  VirtualDub attempts to cut the segments as cleanly as possible,
 but depending on the processing settings, it may have varying levels of success at doing so.  The segments will always be readable in VirtualDub, but here are some tips on maintaining compatibility with other programs:
\par 
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\widctlpar\tx360\jclisttab\tx720\faauto\ls13\rin0\lin360\itap0 {Do not compress the audio, and leave
 it as PCM.  This gives the audio stream a very fine granularity, less than one-thousandth of a second, and allows VirtualDub to make a very precise cut.  In contrast, VirtualDub will have trouble choosing a clean cut point with a 29.97 fps video stream i
f the audio stream only has 20 blocks per second.\line 
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}
Use uncompressed video, or set video compression such that only key frames are generated.  This can be done with compression that inherently does no delta compression, such as Motion JPEG, or by setting the
 key frame interval to 1.  Otherwise, VirtualDub can cut the video on a non-key frame, possibly resulting in decompression errors in the receiving application.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_import}}}{Importing segmented files from other applications
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Because there is no standard way to mark AVI segments, VirtualDub requires manual assistance when importing segments from other programs, such as Markus Zingg\rquote 
s AVI_IO.  This must only be done when first opening the file; any subsequent jobs created from the video will contain the complete list of segment filenames and you won\rquote t have to select them again.
\par 
\par To manually combine segments:
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s15\ql \li0\ri0\widctlpar\jclisttab\tx360\faauto\ls14\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
Open the first segment as you would open any other video file.
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \ql \li0\ri0\widctlpar\jclisttab\tx360\faauto\ls14\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Choose }{\i Append Video Segment\'85}{
 from the File menu for each additional segment, in order.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The first segment is placed in the most recently used (MRU) list, as usual, but subsequent segments are not.  If you want to open the file again, you will have to repeat the process.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ segment_tagging}}}{How the automatic segment joining works
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub automatically writes out a special tag to each segment it creates.  This tag indicates whether the segment is the final segment in the chain, and also supplies a path hint to guide the program to the next segment.  }{\i 
VirtualDub cannot automatically join segments that do not have this special tag.}{
\par 
\par The tag is a small chunk with a fourCC of }{\f2 segm}{
 that resides somewhere in the main AVI header LIST chunk.  It must not be embedded within another LIST, such as one of the stream header blocks.  The segment chunk consists of a single byte, followed b
y a null-terminated C-style string.  The first byte is a hex }{\f2 01}{ byte if there is a subsequent segment, and hex }{\f2 00}{ if there is not.  The optional C-style string that follows specifies }{\i only the path}{
 to the segment.  Applications writing this chunk should not
 write in UNC-style paths, because they can cause unacceptable delays if the network is down or the server is otherwise unavailable.  In this case, omit the string or write only the null terminator.  The path should always be fully specified, and never re
lative to the current directory or to a drive.  In the case that a segment is moved, VirtualDub will query the user if it detects a next segment but cannot find it.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Example:
\par }\pard\plain \ql \li720\ri0\widctlpar\faauto\rin0\lin720\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2 'segm' 00 00 00 01 00 00}{
\par This file is the last, or only, segment in a segmented video.
\par 
\par }{\f2 'segm' 00 00 00 06 01 'F:\\x' 00
\par }{There is at least one segment beyond this file.  Programs should look for a file called }{\f2 F:\\x\\}{\i basename}{\f2 .}{\i nn}{\f2 .avi}{.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Segments }{\i must}{ have the filename format }{\f2 basename.00.avi}{, where the first segment is }{\i basename}{.00.avi, the second is }{\i basename}{.01.avi, etc.  If there are more than 100 segments, the next segment is }{\i basename}{
.100.avi.  These filenames can be generated with the printf() formatting specifier }{\f2 %s.%02d.avi}{.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ stripe_intro}}}{ RAID striping for AVI files?
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Deprecated.  Expected to be removed in later releases.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Well, not quite.  VirtualDub\rquote s striped AVI support allows you to direct the flow of data that would normally go into a single AVI file toward a number of AVI files.  Among the advantages of striping:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{You can take advantage of the disk bandwidth of multiple drives.
\par }{\f3 \'b7\tab }{You can dictate buffer and chunk sizes for more reliable video captures.
\par }{\f3 \'b7\tab }{Because multiple AVI files are used, you can have 2 gigabytes (2,147,483,647 bytes) per stripe instead of 2Gb for the entire file.
\par }{\f3 \'b7\tab }{You can separate audio and video into separate files.
\par }{\f3 \'b7\tab }{Since the stripes are still valid AVI files, you can fork off all the audio or video into one of the stripes, which can still be used in a regular AVI processing program.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The disadvantages:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{The output buffering can take a lot of memory, as much as 5-10 megabytes if a lot of stripes are being used.
\par }{\f3 \'b7\tab }{If multiple stripes lie on the same physical disk, VirtualDub will try to write to both stripes at the same time.
\par }{\f3 \'b7\tab }{Only VirtualDub can use the whole striping system.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ stripe_sdf}}}{ Creating a stripe definition file
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Stripe definition files have a }{\f2 .stripe}{ extension and tell VirtualDub what stripes are active and what data can go into each stripe.  This is the stripe definition file I use for capture:
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 #stripe
\par 2
\par 0       m       1048576 524288   i:\\capture_master.avi
\par 0       v       2097152 1048576 "e:\\capture_stripe_1.avi"
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Let\rquote s break this down part-by-part.
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 #stripe
\par 2}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The first line of a stripe definition file must be "#stripe" to identify the file as a stripe definition fi
le.  The second is a single number indicating the number of stripes.  Each successive line is for the next stripe, so the third line is for stripe #1, the fourth line stripe #2, and so on.  Extra lines are ignored.
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\b\f2\cf6 0}{\f2        m       1048576 524288   i:\\capture_master.avi
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The first item on a stripe line is the priority of the stripe.  Stripe priority isn\rquote t implemented yet, so you can leave this at zero.
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 
\par 0       }{\b\f2\cf6 m}{\f2        1048576 524288   i:\\capture_master.avi}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The second item is a single character indicating the stripe type.  It can be one of these characters:
\par 
\par {\pntext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin1080\itap0 {\b\f2 a}{
 udio for an audio-only stripe
\par {\pntext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin1080\itap0 {\b\f2 v}{ ideo for a video-only stripe

\par {\pntext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin1080\itap0 {\b\f2 b}{
 oth for a stripe that holds both audio and video
\par {\pntext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin1080\itap0 {\b\f2 i}{ ndex for a index-only stripe

\par {\pntext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li1080\ri0\widctlpar{\*\pn \pnlvlblt\ilvl0\ls1\pnrnot0\pnf3\pnstart1\pnindent360\pnhang{\pntxtb \'b7}}\faauto\ls1\rin0\lin1080\itap0 {\b\f2 m}{
 aster for an audio and index stripe
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par You can create a stripe system without video or audio stripes.  In that case, data is discarded.  You must have one and only one index stripe.
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 0       m       }{\b\f2\cf6 1048576}{\f2  524288   i:\\capture_master.avi
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The third item is the total buffer size of the stripe.  This is the total 
amount of data that the stripe output can accommodate before data must be diverted to other stripes to avoid data loss.  This should normally be at least  65,536 bytes (64K) for audio/index stripes and 262,144 bytes (256K) for video stripes for decent per
formance.  This value will automatically be adjusted up for sector and chunk size.
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 0       m       1048576 }{\b\f2\cf6 524288}{\f2    i:\\capture_master.avi
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The fourth item in the stripe line is the total chunk size of the stripe.  It tells VirtualDub how much data must accumulate in the stripe\rquote 
s output buffer before a flush can occur.  This prevents VirtualDub from making small data writes that hurt disk performance.  If this value is too small, tiny writes occur often, sucking down CPU and disk bandwidth.  If this value is
 too large, the disk write can take too long and cause slowdowns or, during a capture, dropped frames.  This value should be at least 16,384 bytes (16K) for audio and index streams and preferably at least 262,144 bytes (256K) for high-bandwidth streams su
ch as video streams.
\par 
\par Note that if you set the chunk and buffer sizes the same, VirtualDub will be forced to wait until the entire buffer is full before flushing, but won\rquote t be able to place any more data in the buffer until the disk write is complete.  This isn\rquote 
t good unless you have other stripes of the same type (audio/video/index).
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 0       m       1048576 524288   }{\b\f2\cf6 i:\\capture_master.avi}{\f2 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The last item on the line is the filename for the stripe.  You should usually use the full name of the stripe so that t
he same file is used no matter what the current directory is when VirtualDub starts.  If the stripe name has spaces in it, enclose the name in quotes:  }{\f2 "i:\\capture master.avi"}{
\par 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ stripe_captures}}}{ Capturing to a striped system
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Striped captures don\rquote t work with compatibility mode capture, but aren\rquote t much different than normal captures.  Use }{\i Set Striping System}{ instead of }{\i Set Capture File}{ in the menu, and that\rquote 
s it.  The major gotcha with capturing to a striped system is that performance is critical, so follow these optimization tips:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{
Do not use multiple stripes on the same physical drive if any of them are high performance stripes.  Audio and index data is okay, but any video stripes usually need to be separate.  Remember that }{\f2 C:\\}{ and }{\f2 D:\\}{ are different }{\b logical}{
 drives, but may be different partitions on the same }{\b physical}{ drive.\line 
\par }{\f3 \'b7\tab }{Keep the buffer and chunk sizes high, especially for video.  Normal capture mode uses a 1Mb buffer with a 512K chunk size (double buffering).
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par One of the simplest striping systems you can use is to put
 index/audio data in one stripe, and video data in another.  This has the advantage of producing two AVI files that are usable in most movie encoders, while allowing you to capture a bit more video before hitting the 2Gb limit, especially if you are using
 CD-quality audio.  (This is how I captured an entire Fushigi Yuugi episode in MJPEG format at 30fps once.)  The stripe file I use happens to be the same one I used in the previous topic:
\par 
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\f2 2
\par 0       m       1048576 524288   i:\\capture_master.avi
\par 0       v       2097152 1048576 "e:\\capture_stripe_1.avi"
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par My }{\f2 I:\\}{ drive is slower than my }{\f2 E:\\ }{drive, so the video data goes to the faster }{\f2 E:\\}{ drive, and the low-bandwidth audio and index data goes to the slow drive.  The slow stripe is about 180K/s, and the video str
ipe is 1300K/s.  This stripe system allows me to pack about 300 megabytes more video into the capture.
\par 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ stripe_vcm}}}{ Stripe systems for VCM frameclients
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par (For an explanation of VCM frameclients, take a look at }{\uldb An introduction to VirtualDub frameservers}{\v fs_intro}{ and }{\uldb Using the VCM driver}{\v fs_vcmdriver_use}{.)
\par 
\par To make an AVI file for VCM frameclients, you must use a stripe system with a master (}{\b m}{) stripe in it.  This means all the audio must go into a single stripe along with the index data.  The video can be in any configu
ration, since VirtualDub will be handling the video.
\par 
\par If you\rquote re trying to process an existing video with an application that requires the VCM client, you can make a striping system with }{\i only}{ the master stripe.  Then save out the processed AVI.  VirtualDub 
will still process the video, but save only the audio and index marks.  To circumvent the filters, set the video mode to }{\i Direct Stream Copy}{
.  (This will be fixed in a later version of VirtualDub.)  Then start the frameserver and load the new AVI into the other application.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_intro}}}{ An introduction to VirtualDub Frameservers
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par The }{\i frameserver}{ is a special mode of VirtualDub that allows the output of the dub process to be rerouted to another active process on the same computer.  Most video options such as clipping
 and filtering can be used, allowing you to preprocess video and send it directly to an encoding application without having to create a temporary file.  The data is always transferred in full 24-bit color, so no data is lost in the process.  Audio data is
 transferred verbatim, although clipping and offset options are functional.
\par 
\par Frameserver mode is currently only usable with applications that use the AVIFile or VCM interfaces for reading video data.  This includes RealVideo Encoder and AVIEdit.  Applicatio
ns such as XingMPEG Encoder and 16-bit Media Player which bypass the AVIFile system must use the VCM driver and cannot currently take advantage of full frameserver support.  Unfortunately, ActiveMovie does not work with either driver and cannot use frames
ervers at this time.
\par 
\par Windows NT support is untested at this time.  Frameserver support has been tested under Windows 95 and 98 without problems.
\par 
\par A video compression driver for the Installable Compression Manager (ICM) is available to support applications that do not use the AVIFile interface.  Remote serving through TCP/IP is also being considered.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_install}}}{ Installing Frameserver support
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Frameserver support requires that two DLL files, }{\f2 vdserver.dll}{ and }{\f2 vdremote.dll}{, be installed into your }{\f2 Windows\\System}{ directo
ry, and that entries be made in the Registry to alert AVIFile to the presence of these files.  The simplest way to do this is to run VirtualDub Setup and click \'93Install.\'94  Frameserver support is then immediately available.
\par 
\par If you must do this manually, this is the registry file:
\par 
\par }\pard \ql \li0\ri0\keep\widctlpar\hyphpar0\faauto\rin0\lin0\itap0 {\f2 REGEDIT4
\par [HKEY_CLASSES_ROOT\\Clsid\\\{894288e0-0948-11d2-8109-004845000eb5\}]
\par @="VirtualDub link handler"
\par 
\par [HKEY_CLASSES_ROOT\\Clsid\\\{894288e0-0948-11d2-8109-004845000eb5\}\\InprocServer32]
\par @="vdremote.dll"
\par "ThreadingModel"="Apartment"
\par 
\par [HKEY_CLASSES_ROOT\\Clsid\\\{894288e0-0948-11d2-8109-004845000eb5\}\\AVIFile]
\par @="1"
\par 
\par [HKEY_CLASSES_ROOT\\AVIFile\\Extensions\\VDR]
\par @="\{894288e0-0948-11d2-8109-004845000eb5\}"
\par 
\par [HKEY_CLASSES_ROOT\\AVIFile\\RIFFHandlers\\VDRM]
\par @="\{894288e0-0948-11d2-8109-004845000eb5\}"
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_serverside}}}{\cs16\f2\super  }{Starting the frameserver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Launch VirtualDub, and open the AVI file you wish to serve.  Select video and audio settings as you would for a dub.  Note that the following settings do not function in Frameserver mode:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Video processing mode.  Full Processing is always enabled.
\par }{\f3 \'b7\tab }{Video output depth.  Frames are always sent in 24-bit color.  Note that the }{\i decompression color depth}{ }{\b is}{ used.
\par }{\f3 \'b7\tab }{Video compression.  Frames are sent uncompressed.
\par }{\f3 \'b7\tab }{Any video filter which requires previous frames (Temporal Soften).
\par }{\f3 \'b7\tab }{Audio interleaving.  A/V interleaving is completely up to the client.
\par }{\f3 \'b7\tab }{Audio conversion, compression and processing modes.  Audio is always sent in Direct Stream Copy mode, so none of these apply.
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {
\par If you are clipping the audio stream in any way through the video clipping options, it is strongly recommended that you uncompress the audio stream first, and use the }{\i Wav Audio\'85}{
 option to serve audio from the external, uncompressed file instead of the compressed stream.  This gives you the cleanest and most accurate clipping.
\par 
\par Once this is done, select }{\i Start Frame Server\'85}{ and enter in a name for your frameserver on this computer.  This can be anything short (under 50 characters or so); the name of the source is a good choice, but \'93x\'94 will do as well (grin).  N
ow hit OK, and you will be requested to save a }{\f2 .vdr}{ signpost.  The signpost file tells the client which frameserver to use.  If you already have a signpost with the right frameserver name, you do not need to save another.
\par 
\par The frameserver should now be running.  Now you can set up the client.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_clientside}}}{ Adding a client to the frameserver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Open up the application, and select its }{\i Open AVI}{\'85 option, or use whatever method the application uses for opening an AVI file.  Attempt to open the }{\f2 .vdr}{ signpost.  If all goes well, the application should be treating VirtualDub\rquote 
s frameserver like any other AVI file.
\par 
\par If it doesn\rquote t work:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Try forcing the file type to AVI.\line \line If you use the }{\i All Files}{ or }{\i Autodetect Type}{ option when opening the signpost file, the application may not re
cognize the signpost file as being compatible with AVIFile, since the signpost is not a regular AVI file.  Forcing the file type to AVI may work.\line 
\par }{\f3 \'b7\tab }{You may need to rename the }{\f2 .vdr}{ file.\line \line The application may be checking the extension of the file and rejecting it as an AVI file since it does not have an }{\f2 .avi}{ extension.  Try renaming the file so it has an }{
\f2 .avi}{ extension instead of }{\f2 .vdr}{.\line 
\par }{\f3 \'b7\tab }{The application does not support AVIFile.\line \line Some applications simply do not use AVIFile and thus are incompatible with frameserver support.  One such application is Microsoft\rquote 
s ActiveMovie Control, which uses its own routines for reading AVI files.  If this is true, you may be able to use the VCM driver instead (see }{\uldb Installing the VCM driver}{\v fs_vcmdriver_install}{ and }{\uldb Using the VCM driver}{\v 
fs_vcmdriver_use}{).\line \line A telltale sign that the application does use AVIFile is the acceptance of audio files (}{\f2 .wav}{
) as AVI streams, since AVIFile has a built-in handler for such files.  Not all AVIFile applications may support this, though.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_vcmdriver_install}}}{ Installing the VCM driver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\cf6 [Note: The VCM driver is still in alpha stage.  Use at your own risk.]}{
\par 
\par The VCM (Video Compression Manager) driver should be used when the traditional AVIFile driver does not work.  It will work with some applications that do not work with AVIFile, such as XingMPEG Encoder and the 16-bit Media Player.  It does }{\b not}{
 work with ActiveMovie yet (this includes Media Player 5).  Also, it probably won\rquote t work under NT.
\par 
\par Because the VCM driver is still in alpha, installation is not automated.  You will have to install it by manually editing the }{\f2 system.ini}{ file.  Here\rquote s how:
\par 
\par }\pard \ql \fi-1080\li1080\ri0\widctlpar\tx1080\faauto\rin0\lin1080\itap0 {\cf6 Warning!\tab This section tells you how to edit critical system files of Windows.  Even the slightest screwup can render your Windows installation inoperable.  If you\rquote 
re the least bit squeamish, find something else to do.  If you decide to try this, and you screw up your system, you agree that the author wasn\rquote t responsible and that it was }{\b\cf6 all your fault}{\cf6 .}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Copy the }{\f2 vdsrvlnk.dll}{ file to your }{\f2 Windows\\System}{ directory.  This may already be done for you if you installed the AVIFile driver.\line 
\par }{\f3 \'b7\tab }{Open the }{\f2 system.ini}{ file in your Windows directory with Notepad or a similar text editor.\line 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\tx720\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Look for the section where 32-bit drivers are added.  It should look similar to this:\line \line \tab }{\f2 [drivers32]\line \tab vidc.IV50=ir50_32.dll\line \tab 
vidc.MSVC=msvidc32.dll}{\line \line If you do not have a }{\f2 [drivers32]}{ section, you will need to add one.  At the end of the file or after the [drivers] section is fine.\line 
\par }{\f3 \'b7\tab }{Add a line like this after the }{\f2 [drivers32]}{ marker:\line \line \tab }{\f2 vidc.VDST=vdicmdrv.dll}{\line \line Case is unimportant except after the period: it }{\b must}{ be .VDST or else Video for Windows will not find the codec.  
}{\f2 vidc.vdst=}{ will not work!  If your vdicmdrv.dll is not in your }{\f2 Windows}{ or }{\f2 Windows\\System}{ directory, specify the full path (i.e. }{\f2 g:\\projwin\\virtualdub\\vdicmdrv\\release\\vdicmdrv.dll}{
).  It is suggested you place this at the end of any other }{\f2 vidc}{ drivers, because the order of the driver lines in this section is the same order the drivers will appear in the Compression\'85 dialog box.\line 
\par }{\f3 \'b7\tab }{Reboot.
\par }\pard \ql \li0\ri0\widctlpar\tx720\faauto\rin0\lin0\itap0 {
\par If all goes well, the driver should show up in Control Panel, Multimedia.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_vcmdriver_use}}}{ Using the VCM driver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cf6 
\par [Note: The VCM driver is still in alpha stage.  Use at your own risk.]}{
\par 
\par The VCM drive
r operates at the installable compressor (IC) level instead of the AVIFile level.  This means it can only affect video, and not audio.  For this reason, it is not possible to stream processed audio from VirtualDub in real-time; the audio track must be pre
pared ahead of time.  Furthermore, a special file must be prepared to use the VCM driver.
\par 
\par The first step is to make sure the VCM driver is not installed.  If it has not, }{\uldb read the instructions}{\v fs_vcmdriver_install}{ and do it now.  Afterward, you must create a special }{\i striped AVI file}{
 for the VCM driver to work.  You may want to read the }{\uldb introduction to striped AVIs}{\v stripe_intro}{ section first, although this is not necessary.  Assuming your source file is called }{\f2 source.avi}{, and your new VCM-ready AVI file will be
 called }{\f2 e:\\vcmready.avi}{, you will need to prepare a }{\f2 .stripe}{ file like this:
\par 
\par }\pard \ql \li360\ri360\widctlpar\faauto\rin360\lin360\itap0 {\f2 1
\par 0   m   131072   65536   e:\\vcmready.avi}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This stripe definition file tells VirtualDub that you are creating a stripe system consisting of 1 stripe, and that this stripe will contain only index marks and audio.  Note that there\rquote s no video stripe included.  Fine with us.
\par 
\par Now, in VirtualDub, open your source.avi file.  Select }{\i Direct Stream Copy}{ for the video mode, and set audio settings as you please.  Select }{\i Save Striped AVI\'85}{ and
 choose your newly created stripe definition file.  When VirtualDub finishes, you\rquote ll have a }{\f2 vcmready.avi}{ file that contains only an index track and an audio track.
\par 
\par To use the VCM-ready file, setup video options in VirtualDub and start the frameserver.  Name the frameserver  }{\f2 VCM }{ and start it.  Make sure VirtualDub says the VCM driver is installed, and then select the }{\f2 vcmready.avi}{
 file as the source file in the other application.  If all goes well, the application will read audio from vcmready.avi and processed video through VirtualDub from }{\f2 source.avi}{.
\par 
\par }\pard \ql \fi-1440\li1440\ri0\widctlpar\faauto\rin0\lin1440\itap0 {Important note:\tab Only one application can use frameservers through VCM at this time.  This is because the frameserver }{\i must}{ be named VCM.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_aviproxy}}}{Using the proxy mode of the AVIFile driver
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub\rquote s main frameclient driver has a special mode to work with programs that require the .AVI extension on input video files.  Directions and registry patches to control this special mode are in the }{\f2 AVIPROXY}{
 directory of the VirtualDub binary distribution.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_performance}}}{ Frameserver/frameclient performance
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Frameserver mode is, in a word, slow.  One reason is the overhead; there is a process switch for every video and audio frame transferred at least, and sometimes two depending on the client behavior.  The second is that frameserver mod
e cannot read ahead and pipeline frames as the dubbing routines do for performance.
\par 
\par Another gotcha is that frameservers always run at High priority.  Even if the client application is running at below normal priority, its requests execute on the frameserver\rquote 
s process.  As a result, disk I/O and filtering operations on the server side will have priority over most other user tasks in the system.  This degrades performance on 95 and can become extremely irritating under Windows NT.  Therefore, running WinAmp 
to record MP3s to tape while a frameserver is in use is not a good idea.
\par 
\par Finally, chaining two copies of VirtualDub may be fun, but isn\rquote t particularly fast compared to a direct file-to-file dub.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fs_signpost}}}{ Signpost files
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par A }{\f2 .vdr}{ signpost file only holds the full 
name of the frameserver.  This includes your NetBIOS computer name if you have one.  However, there is no support yet for cross-computer frameserving.  The signpost serves only to tell the frameclient software which frameserver to connect to.  The framecl
ient then communicates with the server directly for all other information.  Signpost files are not needed for the VCM driver, only for the AVIFile driver.
\par 
\par In case you get any smart ideas about sharing }{\f2 .vdr}{ signposts across the network, it won\rquote t work.  The client on the other end will notice the computer name is incorrect and will post an error.
\par \page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ start_whatisvdub}}}{ What is VirtualDub?
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par A }{\i dub}{ usually refers to a copy.  You can dub a videotape, an audio tape, or even do an }{\i audio dub}{ on videotape, where you copy only the audio track without disturbing the video.  }{\i VirtualDub}{
 allows you to perform similar operations on your own computer with audio and video files \endash  with a little bit more power.
\par 
\par }\pard \qc \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\{bmc flowchart.bmp\}
\par 
\par }{\b Generalized VirtualDub flow diagram.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par VirtualDub is primarily a linear editing solution; it does not offer general purpose editing capabilities such as splicing or matte effects.  It makes an excellent conversion utility, though; you can recompress, clip, and filter the video to your liking.

\par 
\par }{\b Video filtering?}{
\par 
\par VirtualDub has many of the filters you\rquote 
d expect to find in an image processing program, such as smooth, sharpen, filtered resize, and brightness/contrast adjustment.  You can set up multiple filters in a chain, and apply them all in a single pass.  Once you\rquote ve go
t the filter parameters ready, reworking a file is as easy as Open and Save.
\par 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ start_videomodes}}}{ Video processing modes
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub has four video processing modes.  They are, as follows:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\b\fs24 1.\tab Direct stream copy
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par In this mode, video data is copied directly from input to output without any processing.
\par 
\par }{\b Advantages:}{
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s15\ql \li0\ri0\widctlpar\tx360\jclisttab\tx720\faauto\ls7\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
Fastest mode; as fast as 400fps with many input files.
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \ql \li0\ri0\widctlpar\tx360\jclisttab\tx720\faauto\ls7\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {No quality loss.
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\b Disadvantages:
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Processing must begin on a keyframe.
\par }{\f3 \'b7\tab }{All frames in the range must be copied (no decimation).
\par }{\f3 \'b7\tab }{The video cannot be seen.
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\b\fs24 2.\tab Fast repack}{
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Fast repack mode allows a video stream to be recompressed.  In this mode, VirtualDub hooks decompressor directly to compressor and tries to find the fastest way from one video format to another.
\par 
\par }{\b Advantages:}{
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Depending on the video codecs involved, recompression might take place in a faster format, such as YUV.  This can significantly speed recompression.}{\b 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\b 
\par Disadvantages:
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s15\ql \li0\ri0\widctlpar\jclisttab\tx360\faauto\ls8\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
May not work if the codecs cannot agree on a common image format.
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Video cannot be viewed during process.
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}No image processing possible.
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Some video codecs handle YUV data incorrectly, which can result in upside-down video in this mode.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b\fs24 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\b\fs24 3.\tab Slow repack
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par VirtualDub decompresses the input video to RGB and compresses it using the selected video compressor.
\par 
\par }{\b Advantages:}{
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\ls11\rin0\lin360\itap0 {Allows a v
ideo stream to be recompressed from any video format to any other, provided compressors and decompressors are available.}{\b 
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}{Compatible with more video codecs, because RGB is a very \lquote safe\rquote  format.}{\b 
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\b 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\b Disadvantages:}{
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\ls9\rin0\lin360\itap0 {Often slower than fast repack mode.
\par {\listtext\pard\plain\f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Compressors and decompressors must be compatible; if the decompressor only decompresses to 16-bit RGB, and the compressor only accepts 24-bit RGB, this mode won\rquote t work.
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\b\fs24 
\par 4.\tab Full processing (default)
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The full video processing pipeline is enabled.  This involves a full conversion to 32-bit RGB and back, and the video runs through the current set of video filters.
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Advantages:
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{All filtering options are functional.
\par }{\f3 \'b7\tab }{Any decompressor-compressor pair can be used as long as the decompressor outputs some form of RGB and the compressor accepts 16- or 24-bit RGB.
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\b Disadvantages:}{
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{The slowest mode.
\par }{\f3 \'b7\tab }{Requires the most memory, since all images must be decompressed to 32-bit RGB, and then converted back to a form suitable for the compressor.
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ video_frc_main}}}{Frame rate adjustment and decimation
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub offers two types of frame rate adjustments.  Both are found in the }{\i Video > Frame Rate\'85}{ menu option.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {1. Frame rate adjustment
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par This option allows you to change the playback speed of the source video stream.  It has no effect on the individual frames or on the audio stream, so adjusting this value on a perfect source is }{\i guaranteed}{
 to cause the audio stream to desynchronize.  However, it is very useful for adjusting a poorly timed source back into audio/video sync.  For sufficiently long videos, VirtualDub can do this automatically if you select }{\i 
Adjust so audio and video stream durations match}{.  This option adjusts the video frame rate so that both the audio and video streams have the same time length.
\par 
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {2. Frame rate decimation
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Frame rate decimation allows you to reduce the number of frames in a video.  For instance, you can reduce a 29.97 fps video to a 9.99 fps one.  Because the frame rate is reduced appropriately, audio/video synchronization is not affected by this option.

\par 
\par Note: Frame rate decimation is not compatible with inverse telecine (3:2 pulldown removal).
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ video_frc_ivtc}}}{Inverse telecine (3:2 pulldown removal)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par When motion picture films are formatted for NTSC video, they must go through a process called }{\i telecine}{.  NTSC runs at 29.97 frames per se
cond, while film runs at 24 fps, so the video must undergo a frame rate conversion.  This is accomplished by first slowing down the film by 0.1%, reducing it to 23.976 fps, and then inserting one extra frame every fourth source frame.
\par 
\par Capturing telecined video poses a special problem because the frame insertion is done on a }{\i field}{ basis, by alternating between two and three fields output per source frame.  Given a series of four source frames:
\par 
\par Even field\tab A\tab B\tab C\tab D
\par Odd field\tab A\tab B\tab C\tab D
\par 
\par The output five frames will look like this:
\par 
\par Even field\tab A\tab A\tab B\tab C\tab D
\par Odd field\tab A\tab B\tab C\tab C\tab D
\par 
\par As a result of the telecine process, the second and third frames out of every five are interlaced.  Deinterlace filters can reduce or eliminate the interlacing, but may lower the image quality and still doesn\rquote t remove the inserted fields.
\par 
\par VirtualDub can properly remove the telecine effect.  To do this, the \'93enable inverse telecine\'94 button must be checked in }{\i Video > Frame Rate\'85}{, and the video mode must be set to Full Processing Mode.  When enable
d, the telecine remover reduces the frame rate by 20%.  The telecine remover is adaptive and will automatically relock whenever the pattern offset changes.
\par 
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}}\pard\plain \s15\ql \fi-360\li360\ri0\widctlpar\jclisttab\tx360\faauto\ls12\rin0\lin360\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
Do not enable inverse telecine on a video that has not undergone 3:2 pulldown.  Doing so interlaces fields together improperly.  VirtualDub cannot detect the lack of telecining.
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}The remover may lose sync with poor video or after a cut.  When this occurs, a few frames may be incorrectly interlaced.  VirtualDub reads ten frames ahead and uses two differen
t detection techniques to try to prevent this.
\par {\listtext\pard\plain\s15 \f3\fs18 \loch\af3\dbch\af0\hich\f3 \'b7\tab}Telecine removal is not compatible with frame rate decimation.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 
\f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filt_intro}}}{
 Processing video the powerful way
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Video filters are one of VirtualDub\rquote s most powerful features.  You can chain multiple video operations together in a sequence and have VirtualDub apply them to every frame in the movie sequence automatically.  Many of VirtualDub\rquote 
s filters are designed for speed; most filters will run at several frames per second, and some filters will even run in real time on a reasonably fast Pentium system.  Other filters are designed for quality; for instance, the }{\uldb resize}{\v 
filter_resize}{ filter rivals some image processing programs for quality.
\par 
\par As powerful as this is, VirtualDub only supports linear filter chains; it cannot support }{\i filter graphs}{ where the processing path can branch off or even loop back.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filt_dialog}}}{ The }{\i Filter}{ dialog box
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par \{bmc filter-dialog.bmp\}
\par 
\par The }{\i Filter\'85}{ dialog box displays your current filter chain.  Each line indicates the input frame size, the output frame size, and the filter used at that step.
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Use }{\b Add}{ to add another filter to the list.
\par }{\f3 \'b7\tab }{\b Delete}{ nukes a filter entry.
\par }{\f3 \'b7\tab }{\b Move Up}{ moves a filter earlier in the order.  This can change how other filters operate by changing the input frame sizes of subsequent filters.
\par }{\f3 \'b7\tab }{\b Move Down}{ moves a filter later in the order.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par You can add multiple instances of a filter at different points in the sequence.  Each filter will act independently.  Sometimes it is useful to use multiple runs of a filter, such as }{\uldb 2:1 reduce}{\v filter_2_1_reduce}{.
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{\b Configure}{ changes options for a filter instance, if the filter supports extra options.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Some filters have additional options you can change, such as quality/speed tradeoffs or output sizes; when you }{\b Add}{ an instance of a configurable filter, the configuration box for that filter wil
l automatically pop up.  You can manually select the filter instance and click }{\b Configure}{ to change the options.
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{\b Clipping}{ allows you to keep a rectangle in an image and discard the area around it.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par If there\rquote s junk around a message, you can attach a clipping rectangle to a filter, so it only works on that rectangle; everything else goes away.  The clipping rectangle
 occurs immediately before the filter and occurs for free, since no extra work goes into discarding the extra data.  However, it is advantageous to clip as soon as you can in the order since the earlier you clip, the less data subsequent filters will have
 to process.
\par 
\par Because a clipping rectangle can only be attached }{\i before}{ a filter, you have to add a }{\uldb null transform filter}{\v filter_null_transform}{ to clip after the last filter or clip when no filters are being used.
\par 
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 
\f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote 
\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_2_1_reduce}}}{ 2:1 Reduce (normal and high quality)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Shrinks the image to half its size in both the x and y directions.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Both filters do the same operation, but with slightly different filtering.  The high quality filter is also known as a }{\i loop filter}{; it combines pixels in overlapping 3x3 matrices, simila
r to blur filters.  The lower-quality filter combines non-overlapping 2x2 blocks, and is more suited to certain types of computer-generated images.
\par 
\par The general }{\i reduce}{ filter can also be used for these tasks, but the 2:1 filters are much faster.  It is recommended that the }{\i resize}{
 filter be used when quality is important, however, because the 2:1 filters use the equivalent of bilinear filtering, while the resize filter can use bicubic.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par \page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain 
\s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_3_3_average}}}{ 3x3 Average
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s17\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Deprecated.  Likely to be removed in a later release.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Replaces each pixel by the average of itself and its neighbors.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This filter is a fast blur operation.  The weighting is actually 32/256 for the center pixel and 28/256 for each of the surrounding pixels, so it\rquote s not exactly an even average.  3x3 Average
 is good for large (320x240 or bigger) images that have noise or other small, undesirable artifacts.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_blur}}}{
 Blur
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Applies a radius-1 gaussian-blur to the image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This is a nice, soft, rounded blur.  It\rquote s better than the 3x3 average.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_blur_more}}}{ Blur more
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Applies a radius-2 gaussian blur to the image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par A nice, soft, rounded blur.  This isn\rquote t very good for noise reduction, though, since it blurs the image too much.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_box_blur
}}}{ Box blur
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Applies one, two, or three passes of a box blur to the image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Box blurs, also known 
as moving averages, are extremely fast, but poor quality blurs, because of the boxy artifacts they produce.  However, applying box blurs multiple times gives good approximations to the Gaussian with a fraction of the computing load.  Set the filter to pow
er 1 to use a box blur, power 2 for a triangle filter, and power 3 for a cubic.  Box blur on power 3 is a very good approximation, and in addition, is nearly independent of filter width \endash  a radius-50 blur with this filter is extremely fast.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_brightness_contrast}}}{ Brightness/contrast
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Brightens, darkens, and adjusts contrast for an image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The brightness slider linearly brightens or darkens a image; parts of the image that are already bright or dark will saturate at one end.  The contrast slider enhances the difference betwee
n light and dark images; it consistently makes everything brighter, so you\rquote ll probably want to use the brightness slider at the same time.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_dei
nterlace}}}{Deinterlace
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Removes interlacing artifacts from interlaced video.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Interlacing artifacts occur when two fields of a frame don\rquote t match very well.  As a result, alternating horizontal lines appear where the match is poor.  This can screw up video processing, particularly those such as compression and resizing.

\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{\b blend}{ (or }{\b interpolate}{) is the best mode to choose.  Thi
s is effectively a vertical blur on the image, arranged just right to remove the interlacing artifacts.  You might notice slight edge blurring with this mode, but in general you won\rquote t.\line 
\par }{\f3 \'b7\tab }{\b duplicate}{ discards one of the fields and replaces it with the other.  This is a good mode to choose if you need to preserve the frame size, but don\rquote t want one of the fields.  In particular, this prevents \'93half-and-half\'94
 images from showing up from a 3:2 pulldown (telecine) video.  However, this results in jagged edges as well.\line 
\par }{\f3 \'b7\tab }{\b discard}{ is similar to duplicate, but halves the vertical size of the frame as well.  This is good if the interlaced video has an odd aspect ratio, such as 320x480.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_emboss}}
}{ Emboss
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Replaces an image with a 3D lifted/depressed-face relief based on pixel brightness.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Depending on how bright a pixel is, it appears to be higher or lower than surrounding pixels after an emboss operation.  You can alter the direction of the light source; choosing the opposite direction effectively inverts the relief.  The }{\i emboss}{ o
peration treats all three RGB channels separately, so color fringes will appear where the chrominance changes.  If this is a problem, use the }{\i greyscale}{ filter first to emboss purely on luminance.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_fill}}}{
 Fill
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Fills a rectangle on the image with a solid color.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par You set the rectangle for the }{\i Fill}{ filter similarly to how you set up clipping, but instead of affecting areas outside the rectangle, }{\i Fill}{ blots out the area inside.  Click on }{\i Pick Color}{ to select a col
or other than black to fill the area with.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_flip_horizontally}}}{ Flip horizontally
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Flips an image so that what was on the right is on the left, and vice versa.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par If you find anything neat in a mirror in a video, you can use this filter to flip it back to a reasonable orientation.  Further explanation would be futile, I guess\'85
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_flip_vertically}}}{ Flip vertically
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Flips an image, so that the bottom is on top and vice-versa.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This filter is mainly for programmers, and less for users, although there may be some perverse use for it in the vi
deo arena.  Windows Device Independent Bitmaps (DIBs) are stored upside-down, so quick programs that dump picture data to AVI format may accidentally place it inverted.  This filter allows you to rectify that situation without having to rewrite your AVI f
ile.
\par 
\par Actual origin of this filter:  Hacked version of Snes9x 1.05 for DOS, writing out frames from the Final Fantasy 5 intro to a 320x240x16-bit AVI.  Inverted, of course.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_general_convolution}}}{ General convolution
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Replaces each pixel by a linear function of itself and its neighbors.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This is a versatile filter.  Many of the other filters, such as 3x3 average, emboss, sharpen, and brightness/contrast can be replaced by a general convolution filter, but the specific
 filters are much better optimized for the task speed-wise.  The convolution filter simply allows you to multiply the center pixel and its 8 surrounding neighbors by fractional values, add them all up, add a bias, and then use the result as the new pixel.
  The fractional values are multiplied by 256.  Example matrices:
\par 
\par Identity matrix (straight source-to-destination copy):
\par }\pard \ql \li0\ri0\widctlpar\tqc\tx720\tqc\tx1440\tqc\tx2160\faauto\rin0\lin0\itap0 {\tab 0\tab 0\tab 0
\par \tab 0\tab 256\tab 0
\par \tab 0\tab 0\tab 0
\par 
\par 3x3 Average matrix (blur):
\par \tab 28\tab 28\tab 28
\par \tab 28\tab 32\tab 28
\par \tab 28\tab 28\tab 28
\par 
\par Sharpen:
\par \tab -16\tab -16\tab -16
\par \tab -16\tab 384\tab -16
\par \tab -16\tab -16\tab -16
\par 
\par Doubling contrast:
\par \tab 0\tab 0\tab 0
\par \tab 0\tab 512\tab 0
\par \tab 0\tab 0\tab 0
\par 
\par Emboss from top-left, not rounded:
\par \tab -32\tab 0\tab 0
\par \tab 0\tab 0\tab 0
\par \tab 0\tab 0\tab 32
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_grayscale}}}{ Grayscale
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\f3 \'b7\tab }{Replaces each pixel by its luminance value, stripping the image of chrominance information.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }{\i Grayscale}{ rips out color from your image, reducing it to a series of gray pixels.  The equation used for this is:
\par 
\par \tab }{\f2 Y = 0.213R + 0.715G + 0.072B
\par }{
\par This is the recommended equation for contemporary monitors.  Note that this is different from the traditional NTSC equation:
\par 
\par \tab }{\f2 Y = 0.30R + 0.59G + 0.11B}{
\par 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_invert}}
}{Invert
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Inverts the entire image, just like a negative.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par A very simple filter.  Watch the video histogram carefully when using this filter, since you might have your monitor considerably darker than it should be, and an inverted \'93black\'94 might turn out grayish.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_levels}}
}{Levels
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 
\par \'b7\tab }{Adjusts brightness levels in the image.
\par 
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
This filter maps from one brightness range to another.  The top bar with the three arrows is the input range; the bottom bar represents the output range.  When an image has low contrast, drag the top lef
t and top right arrows to narrow the input range.  Anything to the left of the black arrow becomes black; anything to the right of the white arrow becomes white.  The gray arrow in the middle controls gamma correction, and whatever brightness level it poi
nts to is mapped to 50% in the output range.
\par 
\par Normally, the default output range is okay, but if you want to decrease the contrast, drag the output arrows in.  Anything beyond \lquote black\rquote  in the input range maps to the black output point, and anything beyond \lquote input white\rquote 
 maps to the white output point.
\par 
\par Generally, to use this filter, you should sample the video to obtain a histogram, and then drag the input bounds inward so that the darkest parts of the image are black, and the brightest parts are white.  As us
ual, it is possible to correct an image that has too little contrast, but not one that has too much.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_motion_blur}}}{ Motion blur
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Blurs successive images together.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The 3x3 Average filter is a }{\i spatial}{ filter because it blurs across an image; this filter is a }{\i temporal}{ filter because it blurs across the time axis.  Specifically, the previous frame is averaged with the current.  This 
leads to a very slight \'93ghosting\'94 effect.  A low-motion video with noise may benefit from this filter, because noise in one frame tends to partially cancel noise in another.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\line \page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_null_transform}}}{ Null transform
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\f3 \'b7\tab }{Does nothing.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Exactly as it says above.  This filter does nothing.  Except for one thing.  It provides a placeholder for the clipping when no other filters are being used.  Because the filter does nothing, the clipping doesn\rquote 
t add any extra work to the processing stage.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_resize}}
}{ Resize
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Resamples an image so that it is bigger or smaller than it used to be.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par No, this is not a lame }{\f2 StretchDIBits()}{ filter.
\par 
\par VirtualDub\rquote s resize filter is both fast and high-quality; it can outstrip the Windows 95/98 graphics routines both in speed and quality.  It has five antialiasing filter modes, each of which has advantages:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{\b Nearest neighbor}{, or }{\i point sampling}{
, picks the closest pixel in the source image.  This is by far the fastest mode but also looks lousy, especially if the new dimensions are not integral multiples or divisions of the old ones.  In this mode, VirtualDub b
asically drops and duplicates pixels.\line 
\par }{\f3 \'b7\tab }{\b Bilinear}{ uses a linear approximation in both directions using a 2x2 kernel.  This is the second fastest mode, and produces very good results.  It can reduce down to about 66% and enlarge up to about 8x without visib
le stairstepping.  Most video cards with smooth video overlays have bilinear filtering in hardware.  Bilinear filtering tends to produce a slightly blurry image and at very high magnification results in trapezoidal patterns.  Because this mode only uses a
 2x2 kernel, at high reduction it results in pixellation much like the nearest neighbor mode.\line 
\par }{\f3 \'b7\tab }{\b Bicubic}{
 is the best choice for enlarging a picture, producing slightly sharper images at moderate levels and curves instead of trapezoids at high zooms.  It is significantly slower than bilinear but  produces much better at high magnfications such as 20x
.  Because bicubic mode treats detail better, very noisy video can appear worse under bicubic filtering than bilinear.  Because bicubic mode only uses a 4x4 kernel, it too results in pixellation at high reduction.\line 
\par }{\f3 \'b7\tab }{\b Precise bilinear}{ uses a full bilinear f
iltering kernel rather than a 2x2 and works for both reducing and enlarging pictures.  When enlarging, this mode works similarly to bilinear, but when shrinking this filter averages many pixels together.  This results in a much more faithful image and eff
ectively squashes noise, even better than the 2:1 filter.  Unfortunately, this filter mode is also slightly slower than bilinear mode when enlarging and signfiicantly slower when shrinking.\line 
\par }{\f3 \'b7\tab }{\b Precise bicubic}{
 uses a full bicubic filtering kernel rather than a 4x4.  It works very similarly to precise bilinear, but the bicubic kernel produces sharper images, when either shrinking or enlarging.  Shrinking a noisy 320x240 video with this filter ca
n result in a sharp, clean 160x120 video.  This filter is also the slowest of them all.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_rotate}}
}{Rotate
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Rotates an image 90, 180, or 270 degrees.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Use this filter if you need to rotate the video by right angles.  The frame size is altered to reflect the new size.  You may also need to use a flipping filter if your video is in a particularly funny orientation.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_rotate2}
}}{Rotate2
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Rotates an image by any arbitrary angle.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This filter can rotate video by any angle, even in sub-degree increments.  However, it is slower than the regular Rotate filter for right-angle rotates.  The areas added due to the rotation are filled with a user-selected color.
\par 
\par You can choose from several filtering methods:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{\b Point samping}{ gives yo
u a quick and dirty rotate.  It is very fast, but gives rough edges and highly cumulative error on multiple rotates.  For quick and dirty rotates such as previews, though, it\rquote s fine.\line 
\par }{\f3 \'b7\tab }{\b Bilinear}{ takes longer but gives smoother edges and better image quality.  Cumulative rotates will blur the image significantly, so this filter isn\rquote t very good for more than one rotate.\line 
\par }{\f3 \'b7\tab }{\b Bicubic}{ gives the better quality than the above two and is much better at preserving detail.  An image can survive five or so rotates with
out significant image degradation.  Note that this filter still does bilinear filtering on the edges, but this is a very minor issue.  This filter is the slowest.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The }{\b expand bounds}{ option stretches the picture frame to fit the rotated picture.  Ordinarily, VirtualDub keeps the original image size and rotates the image, cropping the parts that don\rquote 
t fit.  The image is always rotated around the center in either case.
\par 
\par If you really want to test a rotation algorithm, one good test is to do a 180 degree rotation in 5-degree steps and then do a single backwards 180 flip.  The image degradation will show you how good the rotation algorithm is.  
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_sharpen}
}}{ Sharpen
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Increases contrast between pixels and their neighbors, sharpening it.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Most people know what \'93blur\'94 and \'93sharpen\'94 means, either through glasses or waking up in the morning, so I won\rquote 
t bore you with an explanation of what this filter does.  Two things to watch out for, though, when using this filter.  First, what looks like an \'93edge\'94 in the image is usually t
wo: a transition from light to dark, and again from dark to light.  A dark line that is sharpened will get darker, but will also have new bright lines on its sides.  This is strange, but a useful technique when greatly reducing an image is to over-sharpen
 it first to enhance features.  Second, never sharpen an image with noise in it.  The \'93ripple\'94 effect of the sharpen transform will show the noise very clearly.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_smoother
}}}{ Smoother
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Removes high frequency noise from an image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This filter is particularly valuabl
e for dealing with VHS video because it can remove noise without affecting sharp edges much.  Smoother works very well on cartoon animation, but can soften videotape artifacts from higher quality video, as well.  Raising the threshold causes the filter to
 consider fewer pixels as \lquote edge pixels\rquote , and blurs more of the image.  Very sharp images will almost never be blurred no matter what the threshold is, though.
\par 
\par Smoother is very effective at reducing the size of final Indeo AVI files (or increasing quality, if you have data rate stricting on).  It is ineffective with sharp tile artifacts, such as those from MPEG or Cinepak.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ fi
lter_temporal_smoother}}}{ Temporal smoother
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Applies an adaptive, time-based blur to the image.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par This filter is an adaptive noise reducer, working along the 
time axis; it is most effective when the image is not moving much.  Increase the filter strength to increase noise reduction, and decrease it to reduce speckling and ghosting artifacts.  It is recommended that you combine this filter with a spatial (area-
based) noise reducer for greatest effect.
\par 
\par Temporal smoother is VirtualDub\rquote s first linear-phase temporal filter, meaning there is a lag between the input and output frames.  This results in some lag in the preview during scrubbing, but the lag is compensate
d for during preview and exporting.  It does mean, however, that the filter will not run correctly in frameserver or capture mode.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 filter_threshold}}}{ Threshold
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Splits an image in half, with bright pixels becoming white and dark ones becoming black.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Very simply, this 
makes your image monochrome, black-and-white.  Pixels darker than the threshold become black.  Pixels brighter than the threshold become white.  No shades of gray, no dithering.  Just straight black-and-white.  The best use of this filter is a diagnostic 
filter, to see which areas of the picture are problem areas in terms of brightness; however, there are creative uses for this filter as well.
\par 
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ filter_ref}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ filter_tv}}}{
 TV
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Attempts to correct or mask noise from TV video sources, particularly VHS.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Don\rquote t expect miracles with this filter.  It works by smoothing the chrominance of an image without touching its luminance.  No sync correction is performed, so a low-quality inpu
t with horizontal or vertical jitter will still appear jittery after this filter.
\par 
\par The first three configuration options, Y/I/Q-channel, allow you to view the three input channels of composite video: brightness, chrominance 1, and chrominance 2.  The brigh
tness (Y) channel is computed with the 30/59/11 distribution that NTSC uses rather than the 21/72/7 breakdown that the grayscale filter uses.  The chrominance 1 (I) and chrominance 2 (Q) channels together determine the color of the picture.
\par 
\par Because of the way chrominance is encoded in composite video, and especially in VHS recording, the chrominance channels often have a lot of noise and error in it compared to the luminance channel.  The TV filter\rquote 
s averaging options try to mask much of the noise.  This has only a slight visual impact but can make a big difference when encoding MPEG videos at low bitrates or any other video format that uses }{\uldb motion prediction}{\v gloss_motion_prediction}{
.  The }{\i 5x5 average + temporal }{option risks greater degredation of the video but can reduce chrominance noise even further than the }{\i 5x5 average}{ can.
\par 
\par This filter without the }{\i temporal}{ smoothing mode is only partially effective with YUV12 compressors like MPEG and almost completely ineffective with YUV9 compressors like Indeo because 
the spatial chrominance averaging is already partially done as the early }{\uldb chrominance subsampling}{\v gloss_chrominance_subsampling}{ steps of these compression algorithms.
\par 
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page 
}{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_change_framerate}}}{ Changing the frame rate of a file
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Use the menu option }{\i Video, Frame Rate}{.
\par }{\f3 \'b7\tab }{If you want to }{\i remove}{ frames, then use }{\i frame rate decimation}{.  If you want to change the }{\i speed}{ at which the frames are played, change the frame rate value.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Remember what the dialog box says: changing the frame rate will affect synchronization, but frame rate decimation won\rquote t.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_compress}}}{ Compressing a file
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {To compress video:
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Choose }{\i Video, Compression\'85}{ and select your compression algorithm.
\par }{\f3 \'b7\tab }{Set the video processing mode to }{\i Full Processing Mode}{.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par To compress audio:
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Choose }{\i Audio, Compression\'85}{ and choose an audio compressor.  \'93PCM\'94 is uncompressed audio.
\par }{\f3 \'b7\tab }{Set the audio processing mode to }{\i Full Processing Mode}{.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The next time you save, the processed video and/or audio will be saved compressed.
\par 
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_delete_junk}}}{ Deleting JUNK chunks from a file
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {VirtualDub never puts JUNK chunks in any AVI file it creates, so the solution is to turn off all processing:
\par 
\par }\pard \ql \li0\ri0\widctlpar\tx360\faauto\rin0\lin0\itap0 {\f3 \'b7\tab }{Set the video processing mode to }{\i Direct Stream Copy}{.
\par }{\f3 \'b7\tab }{Set the audio processing mode to }{\i Direct Stream Copy}{.
\par }{\f3 \'b7\tab }{Open the source file, and save to the output file.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Audio interleaving options work in this mode, and video range selection works to the nearest key frame, so you can re-interleave or trim off ends at the same time.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_extract_audio}}}{ Extracting audio from a file
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Open the source file in VirtualDub.
\par }{\f3 \'b7\tab }{Select }{\i Save WAV\'85}{ from the }{\i File}{ menu.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par The resultant file can then be loaded into any application which plays WAV files.  When doing this, it\rquote s best that the audio mode be set to }{\i Direct Stream Copy}{ so that the audio isn\rquote t processed or decompressed.  N
ote that the range selection options don\rquote t work when extracting audio, so the whole audio track will be extracted.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_insert_audio}}}{ Inserting or replacing audio in an existing file
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Make sure the input audio file is in WAV format.
\par }{\f3 \'b7\tab }{Open the source video file.
\par }{\f3 \'b7\tab }{If you do not want to process the video, select }{\i Direct Stream Copy}{ as the video processing mode.
\par }{\f3 \'b7\tab }{From the }{\i Audio}{ menu, choose }{\i WAV audio}{ as the input source, and select the WAV file you are using as audio.
\par }{\f3 \'b7\tab }{Save the new AVI to disk.
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_repair}}}{ Repairing a bad video file
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
If key frame markers are incorrect, causing some frames to display incorrectly when displayed without playing through from earlier parts of the file (this is common after conversion from QuickTime):
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{In the Open dialog box, check }{\i Popup extended open options}{.
\par }{\f3 \'b7\tab }{Select desired file.
\par }{\f3 \'b7\tab }{Check the box labeled }{\i Re-derive keyframe flags.}{
\par }{\f3 \'b7\tab }{Process file as necessary.  If you don\rquote t want to modify the file in other ways, use the \'93null pass-through\'94 method described in }{\uldb Deleting JUNK chunks from a file}{\v howto_delete_junk}{.
\par }{\f3 \'b7\tab }{Note: This may not work with all compressors.  It is known to work with CinePak and Indeo 5.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par If the file has no index block, or has been truncated in some way, and forces many programs to read the entire file first and others like ActiveMovie to crash, then you may be able to fix the file if VirtualDub can open the file.  If it can:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Follow the directions in }{\uldb Deleting JUNK chunks from a file}{\v howto_delete_junk}{.  If this works, the index chunk should be added to the file.
\par }{\f3 \'b7\tab }{If the keyframe markers are incorrect in the resulting file, then follow the directions above to fix them.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ howto_resize}}}{ Resizing a video file
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Use the }{\i Filters}{ option under the }{\i Video}{ menu.
\par }{\f3 \'b7\tab }{Click \lquote Add\rquote  to add a filter to the list.
\par }{\f3 \'b7\tab }{Select }{\i 2:1 reduce}{ or }{\i 2:1 reduce (high quality)}{ if you want to resize a file to quarter-size (half the width and half the height).  Otherwise, choose the regular }{\i resize}{ filter.  Click OK.
\par }{\f3 \'b7\tab }{If you are using the regular }{\i resize}{ filter, then type in the desired size in pixels.  }{\i Bilinear filtering}{ results in higher quality, but takes more time, especially on a 486.  }{\i Bicubic filtering}{
 is even slower, but produces even better results at high magnifications.
\par }{\f3 \'b7\tab }{You may opt to use the }{\i resize}{ filter with bilinear/bicubic filtering instead of the }{\i 2:1}{ filters if you find that the results are too blurry.  In general, though, the }{\i 2:1}{ filters look better.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Because video frame resizing is a filter operation, it can be combined with any number of other operations, either pre- or post- resize.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ jobs_dialogbox}}}{ Job Control (batch processing)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Vir
tualDub can queue up processing tasks and run them later, in sequence and unattended.  As each job is run, VirtualDub loads the appropriate files, restores all dub settings, and starts the operation in the background.  If an error occurs, VirtualDub abort
s the operation, records the error, and starts the next job.  The job window is independent of the main window, and jobs can be postponed, reordered, and deleted while files are being processed.
\par 
\par \{bmc job-control.shg\}
\par 
\par Click on a field for more information.
\par 
\par If you are running a version of Windows 95 without the new version of the Common Controls library (pre-OSR2 without Internet Explorer 4), only the job name may highlight instead of the entire job line.  This is normal.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ jobs_dlg_name}}}{ Job name
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Each job is automatical
ly generated a name by VirtualDub, starting at "Job 1" and ascending in number.  By clicking on the name, you can edit it to something more readable, such as "Slow-mo clip."  Job names can be anything you want, and are not used for anything other than hum
an identification.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ jobs_dlg_filenames}}}{ Source and destination filenames
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Shows you the source and destination files for the job.  The pathname is trimmed off so the name fits in the dialog box.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ jobs_dlg_times}}}{ Start and end times
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Indicates the last time a job started and ended; if you re
quest that a job be redone, the old times are erased.  Aborted or errant jobs will show stop times here.  Jobs that are a day or more earlier will show dates as well.
\par }\pard\plain \s17\ql \li0\ri0\sa120\widctlpar\faauto\rin0\lin0\itap0 \b\f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ jobs_dlg_status}}}{ Status
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {Describes the current state of the job.  It can be one of the following:
\par 
\par }\pard \ql \fi-1080\li1800\ri0\widctlpar\tx1800\faauto\rin0\lin1800\itap0 {\b Waiting}{\tab The job is ready to be processed.  You can postpone this job by double-clicking it.
\par 
\par }{\b In progress}{\tab VirtualDub is currently processing this job.
\par 
\par }{\b Done}{\tab Job was completed successfully.  Double-click to change state to "Waiting," marking this job to be redone.
\par 
\par }{\b Aborted}{\tab Either the user aborted the job, or VirtualDub was forced closed during the operation (probably due to a crash or hard reboot).  Double-click this job to switch it to "Waiting."
\par 
\par }{\b Error}{\tab VirtualDub detected an error during the dub and started the next job in the queue.  Double-clicking the job will display the error and reset this job to "Waiting."
\par 
\par }{\b Postponed}{\tab This job is in the queue, but will be skipped over.  You can click "postpone" or double-click on the job to toggle this state.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_youidiot}}}{ You dumba\'85 heh heh\'85
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par This section is meant to help you avoid many of the beginners' mistakes that often occur, especially with files distributed over the Internet.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_clipdeadspace}}}{Clip dead space
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par If there\rquote s a static border around your image \endash  for instance, black bars on the top and bottom because the video was letterboxed \endash  clip it out.  Someone will point out that the black bars will compress extremely well, and that\rquote 
s true \endash  with decent compression algorithms, the black bars will take practically no space at all.  It\rquote s the sharp edge between the picture and the black area that does!
\par 
\par Video compression algorithms are designed to optimize the smooth features and edges in video, not artificially hard cliff-like breaks that are perfectly horizontal or vertical.  Normally, video compressors block the image into 8x8 or 16x16 tiles, and you
\rquote re fine if your boundaries like }{\i exactly}{ on those boundaries.  However, if they don\rquote t, the compressor either has to devote a lot of space to forming those perfect edges, or smears them.
\par 
\par Instead, move those edges to where the compressor naturally has to handle cliff-drops: the edge of the picture frame.  If the video\rquote 
s letterboxed, make a letterboxed movie file.  That way, the bandwidth that would have been used for the border and edges can be used on the picture instead.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_avoid_mjpeg}}}{Don\rquote t release in MJPEG, VCR1, VCR2, ASV1, etc.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par MJPEG, VCR1, VCR2, ASV1, and WNV1 are all capture formats, and in addition, all but MJPEG are proprietary.  This means you either need to hunt down the decompression codec from the manufacturer\rquote 
s site, or even worse, possibly need hardware decompression support.  The latter is particularly prone to happen if you\rquote re using MJPEG; there are software codecs available now that don\rquote t need hardware support, but they run slowly on Pentiu
ms or lower, and aren\rquote t free.
\par 
\par Also, capture files tend to be quite large.  You would be much better off using a low-bitrate format such as H.263 or Indeo.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_avoid_outdated_formats}}}{ Avoid outdated formats.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Microsoft Video 1, Radius Cinepak, and Indeo 3.2 are all outdated formats.  Video 1 sucks because it cannot produce a perfect frame in some cases, no matter how much bandwidth you throw at it \endash 
 it can only assign 8 colors to every 16 pixels, and only compresses up to 16-bit video.  It also looks }{\i very}{ blocky, especially at lo
w data rates.  Radius Cinepak produces gross stair-step artifacts due to its motion prediction and takes a lot of space.  Indeo 3.2 can produce sick color bleeding and dithering in many cases.  In other words, these codecs all stink compared to more moder
n ones and should be avoided.
\par 
\par Intel Indeo 4.0/4.1 is the exception.  It has been outclassed by Indeo 5, and ordinarily I'd suggest you avoid it, except that it is the best codec for the AVI format that Apple Macintosh people can decode; there is no Indeo 5
 codec for the Macintosh.  If you really care about playback on a Macintosh (although I don't understand why you should), use Indeo 4 instead.  Otherwise, go ahead and use Indeo 5.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_compress_the_audio}}}{ Compress the audio!
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par I have seen more than one AVI file distributed wi
th CD-quality audio (176K/s).  This is a complete waste of space and often takes as much space as the video track.  16-bit audio at 22KHz or higher should be compressed with, at the very least, ADPCM.  This will reduce the audio track size to between one-
half and one-quarter its original size with very little loss in quality.  In addition, everyone has the ADPCM codec.  Compressing the audio in this manner can shave 2-5Mb off a 20Mb file.
\par 
\par MPEG Audio Layer 3 is still superior, but not everyone has the decompression codec and even fewer people have the compression-capable version.  It can also introduce sync problems into your video.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_dont_compress_avis}}}{ Don't compress AVIs to ZIP, ARJ, RAR, etc.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par If you can gain any significant compression (>5%) with general purpose utilities such as WinZIP and RAR, then you're not making your
 AVI correctly.  If you can reduce the file a lot, it means either you have wasted space in your file (JUNK chunks) or your compression codecs are inefficient.  Remove JUNK chunks with VirtualDub and compress the audio.  There are few advantages to packin
g AVIs and it is a royal pain for those receiving the file.
\par 
\par In addition, packing an AVI file makes it impossible to view a partial download, because the file cannot be decompressed until the entire archive has been received.  If the file is not packed, downloaders can play and repair the incomplete file.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_match_frame_rate}}}{ Match the frame rate to the source.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par I have an Ah My Goddess! ending movie that is recorded at 30 fps.  The video is of a cartoon that changes about three times a second.  What's wrong with this?
\par 
\par There are two problems:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Frames aren't free.  A frame that changes very little or not at all still takes space in the file, and the computer still has to draw each and every frame.\line 
\par }{\f3 \'b7\tab }{The movie was digitized from a video source, and so frames that }{\i look}{ the same or were originally the same aren't anymore due to noise.  The video codec can't tell the difference and will encode the noise.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par In other words, if your input source is a 10fps animation, don't digitize it at higher than 10fps unless you intend to perform noise reduction or field-based (IVTC or deinterlacing) operations, and even then you should reduce it down afterwards.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ common_mistakes}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ cm_stop_attaching_crap}}}{ Stop attaching openings, trailers, etc.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Use computer generated graphics sparingly when \lquote branding\rquote  video.  Video compressors are adapted to natural images and perform sub-optimally on the saturated colors and sharp edges of computer graphics.  Depending on the video codec, ti
tle screens and \lquote bugs\rquote  in the video can adversely affect video quality, especially at low bitrates.
\par 
\par If you must include such items:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{Make openings and trailers self-contained.  That is, don't use transitions to blend them with the video, and try to have
 them start and end on keyframe boundaries.  That way, your openings and trailers don't interfere with the compression of the actual video.  At lower bitrates, this can avoid artifact-plagued transitions.\line 
\par }{\f3 \'b7\tab }{Align the position and size of \lquote bugs\rquote  to eight- or sixteen-pixel boundaries, and make them opaque.\line \line 
Most video compression algorithms handle video in "tiles" of 4x4, 8x8, or 16x16 pixels, and perform motion compensation and prediction on those tiles.  If your bug is not aligned on tile boundaries, the v
ideo codec will devote a lot of data to the border tiles, trying to keep your bug crystal clear while still showing the parts of the original video that show through on those tiles.  If you align the logo, the codec will notice that the tiles involved nev
er change, and can ignore them with very little overhead.\line \line 
For similar reasons, never put holes or transparent regions in the bug.  The codec won't be able to tell that you have a odd-shaped static logo floating above a background, and will simply see a complex tile for which it will devote a lot of space.\line 
\line As a side effect, these steps will often make your bug cleaner, and reduce the "ringing" effects around it.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}}{ }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\cs16\super #}{ misctbl_its_broken}}}{ It's broken\'85
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par These aren't really problems with VirtualDub, but a few miscellaneous fixes related to audio/video on computers in general that we've found to be useful.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_stuttering_activemovie}}}{ Stuttering in ActiveMovie and Windows Media Player
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Note that }{\i ActiveMovie}{ is the name of the movie streaming technology, and }{\i Windows Media Player}{ is an application that uses }{\i ActiveMovie}{.
\par 
\par This problem often shows up as uneven frame rates, where the movie will suddenly play too quickly, and sound may even skip.  We've traced this down to two causes:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{The Indeo 5 codec.\line \line 
For some reason, movies created with the Intel Indeo 5 codec will occasionally play too quickly under ActiveMovie.  The solution is to hit play, then pause the movie immediately, and unpause again.  This seems strange, but then again, so is the problem.
\line 
\par }{\f3 \'b7\tab }{Half-duplex mode in Creative Sound Blaster AWE32/64 drivers.\line \line 
Consistent stuttering seems to be a symptom in this case, particularly if Reverb is enabled.  It turns out that one way to fix this problem is to download the latest Sound
 Blaster drivers from the Creative site (ftp.creaf.com) and turn on full-duplex mode.  This disables Reverb on the wave out, but you can toggle full-duplex operation without rebooting, so this isn't a problem.\line \line 
Note that this problem won't go away if you simply mute Reverb.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_fraunhofer_mp3}}}{ Fraunhofer-IIS's MPEG Audio Layer 3 codec
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par There are three versions of Fraunhofer-IIS's MP3 codec:
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard\plain \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f3 \'b7\tab }{Standard version.\line \line 
This version will decode all MP3 streams, but cannot compress.  Newer versions of Windows Media Player come with this codec.\line 
\par }{\f3 \'b7\tab }{Advanced version.\line \line The Advanced codec will decompress all MP3 streams and will also encode MP3 streams up to 64 kilobits/sec (22KHz).  It usually comes with Microsoft Netshow.\line 
\par }{\f3 \'b7\tab }{Professional version.\line \line Decodes all MP3 streams and encodes up to 128 kilobits/sec (CD quality).  This codec is very hard to find, and its distribution outside of a product is\'85 well, "questionable."
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par Most people do not have the Professional version, and this is the reason why you can often play an AVI file with a 128Kbps audio stream, but can't make one yourself.  (It is technically possible to encode an MP3 with another program and dire
ctly incorporate it into an AVI with the correct tag, but I haven't been able to do it yet.)  Note that since the audio stream is a valid MPEG Layer 3 stream, you can extract the audio track in its entirety with VirtualDub and play it with an MP3 player s
uch as WinAmp.
\par 
\par Another problem with this codec is that it is an enormous hack.  In particular, it sets the }{\f2 nBlockAlign}{ member of the wave format to }{\f2 1}{
.  This means that applications think a single byte can be decompressed into audio, when in fact the Fraunh
ofer-IIS codec will buffer up data until it has enough to decompress a Layer 3 frame.  Extracted sections of such audio streams will often have muted tails because the audio codec discards fractions of frames at the start.  The root of these problems is t
he MP3 spec, which allows audio frames to "borrow" unused bandwidth from earlier frames, making it impossible for the MP3 audio codec to specify a fixed size for a self-contained audio block. 
\par 
\par Finally, the Fraunhofer-IIS codec is very lazy and incorrectly 
sets the bitrate of the stream.  For instance, a 48Kbit stream encoded by the Fraunhofer-IIS codec has a specified rate of 6000 bytes/sec, when in reality the stream is about 5971 bytes/sec.  This 0.0048% difference may not seem like much, except that it 
causes the audio to race past the video approximately one second for every 200 seconds of video.  One way to \lquote fix\rquote 
 this problem is to correspondingly adjust the video frame rate to compensate.  VirtualDub will automatically correct for this problem when compressing audio to MPEG format.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_video_files_activemovie_only}}}{ Video files play in ActiveMovie applications only
\par 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
ActiveMovie can use two types of video codec: standard Video Compression Manager (VCM) drivers and ActiveMovie filters.  Non-ActiveMovie applications such as VirtualDub c
an only use the former.  Usually, either only the VCM driver or both the driver and the filter for a particular format will be installed, but sometimes only the ActiveMovie filter is installed.  One common example is Final Fantasy VII PC, which installs a
n ActiveMovie filter for the Duck TrueMotion format, but no VCM driver.  (Incidentally, all the FF7 PC movies suck compared to the PSX ones, so this isn't a great loss.)
\par 
\par Usually, installing Microsoft Netshow or the Windows Media Toolkit will give you the needed drivers.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_cant_compress}}}{ Can't compress to a particular audio/video format
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Microsoft Netshow and Windows Media Player will sometimes install decompression-only versions of drivers that say they can compress, but refuse to do so when asked, either because the dr
iver author was a moron or the driver requires a "authorization key" of some sort.  Nothing can be done about this except to find a compression-capable version of the driver.  VDOWave and Duck TrueMotion are two common decompression-only codecs.
\par 
\par More detail is available on the following drivers:
\par }\pard \ql \li360\ri0\widctlpar\faauto\rin0\lin360\itap0 {\uldb Fraunhofer-IIS MP3 (audio)}{\v misctbl_fraunhofer_mp3}{
\par }{\uldb Windows Media Audio v1 and v2 (audio)}{\v misctbl_wma12}{
\par }{\uldb Microsoft High-speed MPEG-4 V1 through V3 (video)}{\v misctbl_mpeg4}{
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_avi_slow_seek}}}{ AVI file very slow at seeking
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par There are comple
te idiots out there who encode AVI files with very long keyframe intervals, or sometimes, no keyframes at all except for the beginning.  These people need to be exterminated because a player app must read all frames from the last decoded frame or keyframe
 
up to the desired frame, which can potentially be more than half the file.  The author has personally seen AVI files more than twelve minutes long without keyframes that took over five minutes to seek to the middle of the movie, because the player had to 
decode each and every frame from the beginning onward.
\par 
\par Some compressors are designed to insert keyframes as needed.  The Microsoft MPEG-4 series of compressors does this.  Even though MS MPEG-4 V1 defaults to a keyframe every hour, and the V3 compressor every 8 seconds, you\rquote 
ll often see keyframe intervals shorter than that.
\par 
\par For most video formats, there is no way to insert keyframes into an existing file without recompressing the entire movie.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_wma12}}}{Cannot encode audio with Windows Media Audio v1 or v2
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Micro
soft does not allow the use of Windows Media Audio encoding in AVI files.  As a result, they have locked the codec driver accordingly so that it only works with the ASF encoding tools.  It would sure be nice if they kept their ASF only drivers from appear
ing in the lists, instead of creating support hassles for video tool makers.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super +{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super +}{ misc_troubleshoot}}#{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{
 misctbl_mpeg4}}}{Cannot encode video as Microsoft High-Speed MPEG-4 V1-V3
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Microsoft does not allow the use of their MPEG-4 codec in AVI files.  As a result, they have locked the MPEG-4 codec driver accordingly so that it only functions with the ASF encoding tools.  All other applications receive cryptic errors (}{\f2 
ICERR_ERROR}{) on both compression and decompression requests.  The first version of }{\f2 MPG4C32.DLL}{ to have this lock was build 3845, and bui
ld 3876 also has the lock.  The earlier, beta builds of the codec, build 2700 and 3688, do not have any such locks.
\par 
\par Some later versions of the codec (3917+)  have V1 and V2 unlocked.
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page \sect }\sectd \sbknone\linex0\endnhere\sectdefaultcl \pard\plain \s18\ql \li0\ri0\widctlpar
\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_CRASH}}}{Congratulations!
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par You\rquote ve managed to crash VirtualDub.  So what happens next?
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{You\rquote ll have to restart any dub or capture operation that was in progress.\line 
\par }{\f3 \'b7\tab }{First, make sure you are using an official build of VirtualDub, not somebody\rquote s hack.  Crash dumps generated by a hacked version are useless to me because I didn\rquote t build it and thus don\rquote 
t have the link map to diagnose the problem.}{\f3 
\par 
\par \tab }{For technical support, click }{\i Save\'85}{ to record the crash information to a file called }{\i crashinfo.txt}{ in the VirtualDub directory.  Then send an email to }{\f2 <phaeron@virtualdub.org>}{
 with this report and an explanation of what you were doing at the time.  I\rquote ll try to track down the problem.\line \line }{\b Please do not do this if you are using any of the following codecs.  I will discard the
 dump because the codecs themselves are known to be problematic and/or buggy:}{
\par 
\par }\pard \ql \li1440\ri0\widctlpar\tx5040\faauto\rin0\lin1440\itap0 {\ul Driver name}{\tab }{\ul Driver filename
\par }{Microsoft MPEG-4 V1/V2/V3\tab MPG4C32.DLL
\par DivX low-motion/fast-motion\tab DIVXC32.DLL, DIVXC32F.DLL
\par AngelPotion Definitive\tab APMPG4V1.DLL, ~AP****.TMP
\par Fraunhofer-IIS MPEG layer III\tab L3CODECA.ACM, L3CODECP.ACM\line 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{
If you are fluent in assembly language, check the instruction referenced by CS:EIP to see if it is an MMX instruction.  If it is, and you do not have an MMX-capable CPU, force MMX optimizations off in VirtualDub\rquote s }{\i Preferences\'85}{
 dialog the next time.  This indicates a bug in VirtualDub.\line 
\par }{\f3 \'b7\tab }{After you\rquote re done looking at code and registers, click OK to bring up the normal Windows application failure dialog.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ IDH_WARN_MPEG4}}}{Warning: Problematic MPEG-4 codec detected.
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par Newer versions of the Microsoft MPEG-4 High Speed V2/V3 codec do not work with AVI-based programs; they will report the error }{\f2 ICERR_ERROR}{
 on either compression or decompression.  This is a generic error.   In VirtualDub, the symptom of this problem is }{\f2 VideoSourceAVI error: unspecified error (-100)}{
 errors when trying to seek in MPEG-4 V2 or V3 files.  Other AVI programs will not be able to use the codec as well.  The only applications that can are from the Windows Media Tools collection, and applications playing .
ASF files back through DirectShow (Windows Media Player cannot even play MPEG-4 V3 AVIs using this codec).
\par 
\par The culprit is the }{\f2 MPG4C32.DLL}{ driver in the }{\f2 WINDOWS\\SYSTEM}{ directory.  As of this writing, all known MPEG-4 codecs work with VirtualDub.  If you have a version that doesn\rquote t, try downloading and installing Windows Media Tools V4 
from Microsoft.  This will updates your MPEG-4 codec driver and may solve your problem.  These codec versions are known to work:
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f1 
\par }\pard \s15\ql \li0\ri0\widctlpar\tx1440\tx2520\faauto\rin0\lin0\itap0 {\f1\ul Version}{\f1 \tab }{\f1\ul File size}{\f1 \tab }{\f1\ul Status}{\f1 
\par }\pard\plain \ql \li0\ri0\widctlpar\tx1440\tx2520\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\f2 4.00.0.3688\tab 416,304}{\tab works with all programs
\par }{\f2 4.00.0.3845\tab 413,248}{\tab not usable
\par }{\f2 4.1.00.3918\tab 413,760}{ \tab only usable for MPEG-4 V1 and V2
\par }\pard\plain \s18\ql \li0\ri0\widctlpar\tqc\tx4320\tqr\tx8640\faauto\rin0\lin0\itap0 \f1\fs32\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\page }{\cs16\super #{\footnote \pard\plain \s15\ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 
\f28\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {\cs16\super #}{ adv_commandline}}}{Command line options
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 \f1\fs18\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par VirtualDub supports limited control via command line options.  Allowable switches:
\par 
\par }\pard \ql \fi-360\li360\ri0\widctlpar\tx360\faauto\rin0\lin360\itap0 {\f3 \'b7\tab }{\f2 /b}{\i source_dir}{\f2 ,}{\i dest_dir}{
  adds a batch of jobs to translate from one directory to another, using the current options.  (Note: there are no spaces in the switch.)
\par }{\f3 \'b7\tab }{\f2 /c}{ clears all jobs in the job list.
\par }{\f3 \'b7\tab }{\f2 /r}{ runs the job list.
\par }{\f3 \'b7\tab }{\f2 /s}{\i script_name }{runs a script.
\par }{\f3 \'b7\tab }{\f2 /x}{ forces an exit after the job list has run.
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par }{\i The order of the switches matters, since switches are run from left-to-right.}{  Because VirtualDub configuration files are simply Sylia scripts, just like the job list, they can be invoked using the }{\f2 /s}{ option t
o set the dub processing parameters.  So to do automated processing of video files, you can set the parameters you want and save them in a configuration file, and then have a scheduling program invoke VirtualDub using a command line like this:
\par 
\par }\pard \ql \fi720\li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {\f2 virtualdub /sparms.vcf /b\'94f:\\ready\'94,\'94f:\\output\'94 /x /r
\par }\pard \ql \li0\ri0\widctlpar\faauto\rin0\lin0\itap0 {
\par VirtualDub will then run the script to load parameters, scan the }{\f2 f:\\ready}{ directory and add job entries to process files there to }{\f2 f:\\output}{, run the job list, and then exit.
\par 
\par Because VirtualDub is a GUI applicati
on, any console it is run from returns immediately, even before VirtualDub has finished processing.  This is fine if you want to process in the background, but poses problems in a batch file.  The solution is to use the }{\f2 start}{
 command to force a wait:
\par 
\par \tab }{\f2 start /wait virtualdub /s\'94pack indeo5.vcf\'94 /bin,out /x /r}{
\par 
\par This works under both Windows 95/98 and NT4.
\par 
\par Finally, if you need more specific control, you can always write a program to generate job scripts and append them onto the }{\f2 virtualdub.jobs}{ file, which is
 simply text.  You must be careful about the format, or VirtualDub can get confused, but this allows you much greater freedom in file and mode selection.  Then, in a batch file, simply invoke VirtualDub with the }{\f2 /r}{ and }{\f2 /x}{
 flags alone to run the job list.
\par 
\par }}